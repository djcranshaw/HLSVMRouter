

================================================================
== Vivado HLS Report for 'VMRouter'
================================================================
* Date:           Wed Jul  5 11:39:42 2017

* Version:        2016.1 (Build 1538259 on Fri Apr 08 16:12:49 MDT 2016)
* Project:        VMRouter_prj2
* Solution:       solution2
* Product family: virtex7
* Target device:  xc7vx690tffg1158-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   2.00|      2.39|        0.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    3|    3|    4|    4|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 4
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
* FSM state operations: 

 <State 1>: 2.39ns
ST_1: stubsInLayer_z_V_addr [1/1] 0.00ns
:19  %stubsInLayer_z_V_addr = getelementptr [1 x i12]* %stubsInLayer_z_V, i64 0, i64 0

ST_1: stubsInLayer_phi_V_addr [1/1] 0.00ns
:20  %stubsInLayer_phi_V_addr = getelementptr [1 x i14]* %stubsInLayer_phi_V, i64 0, i64 0

ST_1: stubsInLayer_r_V_addr [1/1] 0.00ns
:21  %stubsInLayer_r_V_addr = getelementptr [1 x i7]* %stubsInLayer_r_V, i64 0, i64 0

ST_1: stubsInLayer_pt_V_addr [1/1] 0.00ns
:22  %stubsInLayer_pt_V_addr = getelementptr [1 x i3]* %stubsInLayer_pt_V, i64 0, i64 0

ST_1: stubsInLayer_z_V_load [2/2] 2.39ns
:23  %stubsInLayer_z_V_load = load i12* %stubsInLayer_z_V_addr, align 2

ST_1: stubsInLayer_phi_V_load [2/2] 2.39ns
:24  %stubsInLayer_phi_V_load = load i14* %stubsInLayer_phi_V_addr, align 2

ST_1: stubsInLayer_r_V_load [2/2] 2.39ns
:25  %stubsInLayer_r_V_load = load i7* %stubsInLayer_r_V_addr, align 1

ST_1: stubsInLayer_pt_V_load [2/2] 2.39ns
:26  %stubsInLayer_pt_V_load = load i3* %stubsInLayer_pt_V_addr, align 1


 <State 2>: 2.39ns
ST_2: stubsInLayer_z_V_load [1/2] 2.39ns
:23  %stubsInLayer_z_V_load = load i12* %stubsInLayer_z_V_addr, align 2

ST_2: stubsInLayer_phi_V_load [1/2] 2.39ns
:24  %stubsInLayer_phi_V_load = load i14* %stubsInLayer_phi_V_addr, align 2

ST_2: stubsInLayer_r_V_load [1/2] 2.39ns
:25  %stubsInLayer_r_V_load = load i7* %stubsInLayer_r_V_addr, align 1

ST_2: stubsInLayer_pt_V_load [1/2] 2.39ns
:26  %stubsInLayer_pt_V_load = load i3* %stubsInLayer_pt_V_addr, align 1

ST_2: op2_V_read_assign_s [1/1] 0.00ns
:35  %op2_V_read_assign_s = call i4 @_ssdm_op_PartSelect.i4.i12.i32.i32(i12 %stubsInLayer_z_V_load, i32 5, i32 8)

ST_2: tmp_1 [1/1] 0.00ns
:36  %tmp_1 = call i1 @_ssdm_op_BitSelect.i1.i14.i32(i14 %stubsInLayer_phi_V_load, i32 11)

ST_2: tmp [1/1] 0.00ns
:38  %tmp = call i2 @_ssdm_op_PartSelect.i2.i14.i32.i32(i14 %stubsInLayer_phi_V_load, i32 9, i32 10)

ST_2: op2_V_read_assign_1 [1/1] 0.00ns
:40  %op2_V_read_assign_1 = call i2 @_ssdm_op_PartSelect.i2.i7.i32.i32(i7 %stubsInLayer_r_V_load, i32 5, i32 6)


 <State 3>: 2.39ns
ST_3: stg_21 [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap([1 x i12]* %stubsInLayer_z_V), !map !65

ST_3: stg_22 [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap([1 x i14]* %stubsInLayer_phi_V), !map !69

ST_3: stg_23 [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap([1 x i7]* %stubsInLayer_r_V), !map !73

ST_3: stg_24 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecBitsMap([1 x i3]* %stubsInLayer_pt_V), !map !77

ST_3: stg_25 [1/1] 0.00ns
:4  call void (...)* @_ssdm_op_SpecBitsMap([1 x i12]* %allStubs_z_V), !map !81

ST_3: stg_26 [1/1] 0.00ns
:5  call void (...)* @_ssdm_op_SpecBitsMap([1 x i14]* %allStubs_phi_V), !map !85

ST_3: stg_27 [1/1] 0.00ns
:6  call void (...)* @_ssdm_op_SpecBitsMap([1 x i7]* %allStubs_r_V), !map !89

ST_3: stg_28 [1/1] 0.00ns
:7  call void (...)* @_ssdm_op_SpecBitsMap([1 x i3]* %allStubs_pt_V), !map !93

ST_3: stg_29 [1/1] 0.00ns
:8  call void (...)* @_ssdm_op_SpecBitsMap([1 x i4]* %vmStubsPH1Z1_z_V), !map !97

ST_3: stg_30 [1/1] 0.00ns
:9  call void (...)* @_ssdm_op_SpecBitsMap([1 x i3]* %vmStubsPH1Z1_phi_V), !map !101

ST_3: stg_31 [1/1] 0.00ns
:10  call void (...)* @_ssdm_op_SpecBitsMap([1 x i2]* %vmStubsPH1Z1_r_V), !map !105

ST_3: stg_32 [1/1] 0.00ns
:11  call void (...)* @_ssdm_op_SpecBitsMap([1 x i3]* %vmStubsPH1Z1_pt_V), !map !109

ST_3: stg_33 [1/1] 0.00ns
:12  call void (...)* @_ssdm_op_SpecBitsMap([1 x i6]* %vmStubsPH1Z1_index_V), !map !113

ST_3: stg_34 [1/1] 0.00ns
:13  call void (...)* @_ssdm_op_SpecBitsMap([1 x i4]* %vmStubsPH1Z2_z_V), !map !117

ST_3: stg_35 [1/1] 0.00ns
:14  call void (...)* @_ssdm_op_SpecBitsMap([1 x i3]* %vmStubsPH1Z2_phi_V), !map !121

ST_3: stg_36 [1/1] 0.00ns
:15  call void (...)* @_ssdm_op_SpecBitsMap([1 x i2]* %vmStubsPH1Z2_r_V), !map !125

ST_3: stg_37 [1/1] 0.00ns
:16  call void (...)* @_ssdm_op_SpecBitsMap([1 x i3]* %vmStubsPH1Z2_pt_V), !map !129

ST_3: stg_38 [1/1] 0.00ns
:17  call void (...)* @_ssdm_op_SpecBitsMap([1 x i6]* %vmStubsPH1Z2_index_V), !map !133

ST_3: stg_39 [1/1] 0.00ns
:18  call void (...)* @_ssdm_op_SpecTopModule([9 x i8]* @VMRouter_str) nounwind

ST_3: allStubs_z_V_addr [1/1] 0.00ns
:27  %allStubs_z_V_addr = getelementptr [1 x i12]* %allStubs_z_V, i64 0, i64 0

ST_3: allStubs_phi_V_addr [1/1] 0.00ns
:28  %allStubs_phi_V_addr = getelementptr [1 x i14]* %allStubs_phi_V, i64 0, i64 0

ST_3: allStubs_r_V_addr [1/1] 0.00ns
:29  %allStubs_r_V_addr = getelementptr [1 x i7]* %allStubs_r_V, i64 0, i64 0

ST_3: allStubs_pt_V_addr [1/1] 0.00ns
:30  %allStubs_pt_V_addr = getelementptr [1 x i3]* %allStubs_pt_V, i64 0, i64 0

ST_3: stg_44 [1/1] 2.39ns
:31  store i12 %stubsInLayer_z_V_load, i12* %allStubs_z_V_addr, align 2

ST_3: stg_45 [1/1] 2.39ns
:32  store i14 %stubsInLayer_phi_V_load, i14* %allStubs_phi_V_addr, align 2

ST_3: stg_46 [1/1] 2.39ns
:33  store i7 %stubsInLayer_r_V_load, i7* %allStubs_r_V_addr, align 1

ST_3: stg_47 [1/1] 2.39ns
:34  store i3 %stubsInLayer_pt_V_load, i3* %allStubs_pt_V_addr, align 1

ST_3: v_assign_6 [1/1] 0.84ns
:37  %v_assign_6 = xor i1 %tmp_1, true

ST_3: op2_V_read_assign [1/1] 0.00ns
:39  %op2_V_read_assign = call i3 @_ssdm_op_BitConcatenate.i3.i1.i2(i1 %v_assign_6, i2 %tmp)

ST_3: cond [1/1] 1.24ns
:41  %cond = icmp eq i4 %op2_V_read_assign_s, 0

ST_3: stg_51 [1/1] 0.00ns
:42  br i1 %cond, label %1, label %2

ST_3: vmStubsPH1Z2_z_V_addr [1/1] 0.00ns
:0  %vmStubsPH1Z2_z_V_addr = getelementptr [1 x i4]* %vmStubsPH1Z2_z_V, i64 0, i64 0

ST_3: vmStubsPH1Z2_r_V_addr [1/1] 0.00ns
:2  %vmStubsPH1Z2_r_V_addr = getelementptr [1 x i2]* %vmStubsPH1Z2_r_V, i64 0, i64 0

ST_3: vmStubsPH1Z2_pt_V_addr [1/1] 0.00ns
:3  %vmStubsPH1Z2_pt_V_addr = getelementptr [1 x i3]* %vmStubsPH1Z2_pt_V, i64 0, i64 0

ST_3: stg_55 [1/1] 2.39ns
:5  store i4 %op2_V_read_assign_s, i4* %vmStubsPH1Z2_z_V_addr, align 1

ST_3: stg_56 [1/1] 2.39ns
:7  store i2 %op2_V_read_assign_1, i2* %vmStubsPH1Z2_r_V_addr, align 1

ST_3: stg_57 [1/1] 2.39ns
:8  store i3 %stubsInLayer_pt_V_load, i3* %vmStubsPH1Z2_pt_V_addr, align 1

ST_3: vmStubsPH1Z1_r_V_addr [1/1] 0.00ns
:2  %vmStubsPH1Z1_r_V_addr = getelementptr [1 x i2]* %vmStubsPH1Z1_r_V, i64 0, i64 0

ST_3: vmStubsPH1Z1_pt_V_addr [1/1] 0.00ns
:3  %vmStubsPH1Z1_pt_V_addr = getelementptr [1 x i3]* %vmStubsPH1Z1_pt_V, i64 0, i64 0

ST_3: stg_60 [1/1] 2.39ns
:7  store i2 %op2_V_read_assign_1, i2* %vmStubsPH1Z1_r_V_addr, align 1

ST_3: stg_61 [1/1] 2.39ns
:8  store i3 %stubsInLayer_pt_V_load, i3* %vmStubsPH1Z1_pt_V_addr, align 1


 <State 4>: 2.39ns
ST_4: vmStubsPH1Z2_phi_V_addr [1/1] 0.00ns
:1  %vmStubsPH1Z2_phi_V_addr = getelementptr [1 x i3]* %vmStubsPH1Z2_phi_V, i64 0, i64 0

ST_4: vmStubsPH1Z2_index_V_addr [1/1] 0.00ns
:4  %vmStubsPH1Z2_index_V_addr = getelementptr [1 x i6]* %vmStubsPH1Z2_index_V, i64 0, i64 0

ST_4: stg_64 [1/1] 2.39ns
:6  store i3 %op2_V_read_assign, i3* %vmStubsPH1Z2_phi_V_addr, align 1

ST_4: stg_65 [1/1] 2.39ns
:9  store i6 0, i6* %vmStubsPH1Z2_index_V_addr, align 1

ST_4: stg_66 [1/1] 0.00ns
:10  br label %3

ST_4: vmStubsPH1Z1_z_V_addr [1/1] 0.00ns
:0  %vmStubsPH1Z1_z_V_addr = getelementptr [1 x i4]* %vmStubsPH1Z1_z_V, i64 0, i64 0

ST_4: vmStubsPH1Z1_phi_V_addr [1/1] 0.00ns
:1  %vmStubsPH1Z1_phi_V_addr = getelementptr [1 x i3]* %vmStubsPH1Z1_phi_V, i64 0, i64 0

ST_4: vmStubsPH1Z1_index_V_addr [1/1] 0.00ns
:4  %vmStubsPH1Z1_index_V_addr = getelementptr [1 x i6]* %vmStubsPH1Z1_index_V, i64 0, i64 0

ST_4: stg_70 [1/1] 2.39ns
:5  store i4 0, i4* %vmStubsPH1Z1_z_V_addr, align 1

ST_4: stg_71 [1/1] 2.39ns
:6  store i3 %op2_V_read_assign, i3* %vmStubsPH1Z1_phi_V_addr, align 1

ST_4: stg_72 [1/1] 2.39ns
:9  store i6 0, i6* %vmStubsPH1Z1_index_V_addr, align 1

ST_4: stg_73 [1/1] 0.00ns
:10  br label %3

ST_4: stg_74 [1/1] 0.00ns
:0  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 2ns, clock uncertainty: 0.25ns.

 <State 1>: 2.39ns
The critical path consists of the following:
	'getelementptr' operation ('stubsInLayer_z_V_addr', VMRouter.cpp:35) (0 ns)
	'load' operation ('HLSFullStubLayerPS.z.V', VMRouter.cpp:35) on array 'stubsInLayer_z_V' (2.39 ns)

 <State 2>: 2.39ns
The critical path consists of the following:
	'load' operation ('HLSFullStubLayerPS.z.V', VMRouter.cpp:35) on array 'stubsInLayer_z_V' (2.39 ns)

 <State 3>: 2.39ns
The critical path consists of the following:
	'getelementptr' operation ('allStubs_z_V_addr', VMRouter.cpp:41) (0 ns)
	'store' operation (VMRouter.cpp:41) of variable 'HLSFullStubLayerPS.z.V', VMRouter.cpp:35 on array 'allStubs_z_V' (2.39 ns)

 <State 4>: 2.39ns
The critical path consists of the following:
	'getelementptr' operation ('vmStubsPH1Z2_phi_V_addr', VMRouter.cpp:62) (0 ns)
	'store' operation (VMRouter.cpp:62) of variable 'op2.V', VMRouter.cpp:50 on array 'vmStubsPH1Z2_phi_V' (2.39 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
