// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="VMRouter,hls_ip_2016_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690tffg1158-1,HLS_INPUT_CLOCK=2.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.390000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=53,HLS_SYN_LUT=5}" *)

module VMRouter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stubsInLayer_z_V_address0,
        stubsInLayer_z_V_ce0,
        stubsInLayer_z_V_q0,
        stubsInLayer_phi_V_address0,
        stubsInLayer_phi_V_ce0,
        stubsInLayer_phi_V_q0,
        stubsInLayer_r_V_address0,
        stubsInLayer_r_V_ce0,
        stubsInLayer_r_V_q0,
        stubsInLayer_pt_V_address0,
        stubsInLayer_pt_V_ce0,
        stubsInLayer_pt_V_q0,
        allStubs_z_V_address0,
        allStubs_z_V_ce0,
        allStubs_z_V_we0,
        allStubs_z_V_d0,
        allStubs_phi_V_address0,
        allStubs_phi_V_ce0,
        allStubs_phi_V_we0,
        allStubs_phi_V_d0,
        allStubs_r_V_address0,
        allStubs_r_V_ce0,
        allStubs_r_V_we0,
        allStubs_r_V_d0,
        allStubs_pt_V_address0,
        allStubs_pt_V_ce0,
        allStubs_pt_V_we0,
        allStubs_pt_V_d0,
        vmStubsPH1Z1_z_V_address0,
        vmStubsPH1Z1_z_V_ce0,
        vmStubsPH1Z1_z_V_we0,
        vmStubsPH1Z1_z_V_d0,
        vmStubsPH1Z1_phi_V_address0,
        vmStubsPH1Z1_phi_V_ce0,
        vmStubsPH1Z1_phi_V_we0,
        vmStubsPH1Z1_phi_V_d0,
        vmStubsPH1Z1_r_V_address0,
        vmStubsPH1Z1_r_V_ce0,
        vmStubsPH1Z1_r_V_we0,
        vmStubsPH1Z1_r_V_d0,
        vmStubsPH1Z1_pt_V_address0,
        vmStubsPH1Z1_pt_V_ce0,
        vmStubsPH1Z1_pt_V_we0,
        vmStubsPH1Z1_pt_V_d0,
        vmStubsPH1Z1_index_V_address0,
        vmStubsPH1Z1_index_V_ce0,
        vmStubsPH1Z1_index_V_we0,
        vmStubsPH1Z1_index_V_d0,
        vmStubsPH1Z2_z_V_address0,
        vmStubsPH1Z2_z_V_ce0,
        vmStubsPH1Z2_z_V_we0,
        vmStubsPH1Z2_z_V_d0,
        vmStubsPH1Z2_phi_V_address0,
        vmStubsPH1Z2_phi_V_ce0,
        vmStubsPH1Z2_phi_V_we0,
        vmStubsPH1Z2_phi_V_d0,
        vmStubsPH1Z2_r_V_address0,
        vmStubsPH1Z2_r_V_ce0,
        vmStubsPH1Z2_r_V_we0,
        vmStubsPH1Z2_r_V_d0,
        vmStubsPH1Z2_pt_V_address0,
        vmStubsPH1Z2_pt_V_ce0,
        vmStubsPH1Z2_pt_V_we0,
        vmStubsPH1Z2_pt_V_d0,
        vmStubsPH1Z2_index_V_address0,
        vmStubsPH1Z2_index_V_ce0,
        vmStubsPH1Z2_index_V_we0,
        vmStubsPH1Z2_index_V_d0
);

parameter    ap_ST_st1_fsm_0 = 4'b1;
parameter    ap_ST_st2_fsm_1 = 4'b10;
parameter    ap_ST_st3_fsm_2 = 4'b100;
parameter    ap_ST_st4_fsm_3 = 4'b1000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_6 = 32'b110;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] stubsInLayer_z_V_address0;
output   stubsInLayer_z_V_ce0;
input  [11:0] stubsInLayer_z_V_q0;
output  [0:0] stubsInLayer_phi_V_address0;
output   stubsInLayer_phi_V_ce0;
input  [13:0] stubsInLayer_phi_V_q0;
output  [0:0] stubsInLayer_r_V_address0;
output   stubsInLayer_r_V_ce0;
input  [6:0] stubsInLayer_r_V_q0;
output  [0:0] stubsInLayer_pt_V_address0;
output   stubsInLayer_pt_V_ce0;
input  [2:0] stubsInLayer_pt_V_q0;
output  [0:0] allStubs_z_V_address0;
output   allStubs_z_V_ce0;
output   allStubs_z_V_we0;
output  [11:0] allStubs_z_V_d0;
output  [0:0] allStubs_phi_V_address0;
output   allStubs_phi_V_ce0;
output   allStubs_phi_V_we0;
output  [13:0] allStubs_phi_V_d0;
output  [0:0] allStubs_r_V_address0;
output   allStubs_r_V_ce0;
output   allStubs_r_V_we0;
output  [6:0] allStubs_r_V_d0;
output  [0:0] allStubs_pt_V_address0;
output   allStubs_pt_V_ce0;
output   allStubs_pt_V_we0;
output  [2:0] allStubs_pt_V_d0;
output  [0:0] vmStubsPH1Z1_z_V_address0;
output   vmStubsPH1Z1_z_V_ce0;
output   vmStubsPH1Z1_z_V_we0;
output  [3:0] vmStubsPH1Z1_z_V_d0;
output  [0:0] vmStubsPH1Z1_phi_V_address0;
output   vmStubsPH1Z1_phi_V_ce0;
output   vmStubsPH1Z1_phi_V_we0;
output  [2:0] vmStubsPH1Z1_phi_V_d0;
output  [0:0] vmStubsPH1Z1_r_V_address0;
output   vmStubsPH1Z1_r_V_ce0;
output   vmStubsPH1Z1_r_V_we0;
output  [1:0] vmStubsPH1Z1_r_V_d0;
output  [0:0] vmStubsPH1Z1_pt_V_address0;
output   vmStubsPH1Z1_pt_V_ce0;
output   vmStubsPH1Z1_pt_V_we0;
output  [2:0] vmStubsPH1Z1_pt_V_d0;
output  [0:0] vmStubsPH1Z1_index_V_address0;
output   vmStubsPH1Z1_index_V_ce0;
output   vmStubsPH1Z1_index_V_we0;
output  [5:0] vmStubsPH1Z1_index_V_d0;
output  [0:0] vmStubsPH1Z2_z_V_address0;
output   vmStubsPH1Z2_z_V_ce0;
output   vmStubsPH1Z2_z_V_we0;
output  [3:0] vmStubsPH1Z2_z_V_d0;
output  [0:0] vmStubsPH1Z2_phi_V_address0;
output   vmStubsPH1Z2_phi_V_ce0;
output   vmStubsPH1Z2_phi_V_we0;
output  [2:0] vmStubsPH1Z2_phi_V_d0;
output  [0:0] vmStubsPH1Z2_r_V_address0;
output   vmStubsPH1Z2_r_V_ce0;
output   vmStubsPH1Z2_r_V_we0;
output  [1:0] vmStubsPH1Z2_r_V_d0;
output  [0:0] vmStubsPH1Z2_pt_V_address0;
output   vmStubsPH1Z2_pt_V_ce0;
output   vmStubsPH1Z2_pt_V_we0;
output  [2:0] vmStubsPH1Z2_pt_V_d0;
output  [0:0] vmStubsPH1Z2_index_V_address0;
output   vmStubsPH1Z2_index_V_ce0;
output   vmStubsPH1Z2_index_V_we0;
output  [5:0] vmStubsPH1Z2_index_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stubsInLayer_z_V_ce0;
reg stubsInLayer_phi_V_ce0;
reg stubsInLayer_r_V_ce0;
reg stubsInLayer_pt_V_ce0;
reg allStubs_z_V_ce0;
reg allStubs_z_V_we0;
reg allStubs_phi_V_ce0;
reg allStubs_phi_V_we0;
reg allStubs_r_V_ce0;
reg allStubs_r_V_we0;
reg allStubs_pt_V_ce0;
reg allStubs_pt_V_we0;
reg vmStubsPH1Z1_z_V_ce0;
reg vmStubsPH1Z1_z_V_we0;
reg vmStubsPH1Z1_phi_V_ce0;
reg vmStubsPH1Z1_phi_V_we0;
reg vmStubsPH1Z1_r_V_ce0;
reg vmStubsPH1Z1_r_V_we0;
reg vmStubsPH1Z1_pt_V_ce0;
reg vmStubsPH1Z1_pt_V_we0;
reg vmStubsPH1Z1_index_V_ce0;
reg vmStubsPH1Z1_index_V_we0;
reg vmStubsPH1Z2_z_V_ce0;
reg vmStubsPH1Z2_z_V_we0;
reg vmStubsPH1Z2_phi_V_ce0;
reg vmStubsPH1Z2_phi_V_we0;
reg vmStubsPH1Z2_r_V_ce0;
reg vmStubsPH1Z2_r_V_we0;
reg vmStubsPH1Z2_pt_V_ce0;
reg vmStubsPH1Z2_pt_V_we0;
reg vmStubsPH1Z2_index_V_ce0;
reg vmStubsPH1Z2_index_V_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_19;
reg   [11:0] stubsInLayer_z_V_load_reg_384;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_165;
reg   [13:0] stubsInLayer_phi_V_load_reg_389;
reg   [6:0] stubsInLayer_r_V_load_reg_394;
reg   [2:0] stubsInLayer_pt_V_load_reg_399;
reg   [3:0] op2_V_read_assign_s_reg_406;
reg   [0:0] tmp_1_reg_412;
reg   [1:0] tmp_reg_417;
reg   [1:0] op2_V_read_assign_1_reg_422;
wire   [2:0] op2_V_read_assign_fu_352_p3;
reg   [2:0] op2_V_read_assign_reg_428;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_185;
wire   [0:0] cond_fu_359_p2;
reg   [0:0] cond_reg_434;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_210;
wire   [0:0] v_assign_6_fu_347_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        cond_reg_434 <= cond_fu_359_p2;
        op2_V_read_assign_reg_428 <= op2_V_read_assign_fu_352_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        op2_V_read_assign_1_reg_422 <= {{stubsInLayer_r_V_q0[ap_const_lv32_6 : ap_const_lv32_5]}};
        op2_V_read_assign_s_reg_406 <= {{stubsInLayer_z_V_q0[ap_const_lv32_8 : ap_const_lv32_5]}};
        stubsInLayer_phi_V_load_reg_389 <= stubsInLayer_phi_V_q0;
        stubsInLayer_pt_V_load_reg_399 <= stubsInLayer_pt_V_q0;
        stubsInLayer_r_V_load_reg_394 <= stubsInLayer_r_V_q0;
        stubsInLayer_z_V_load_reg_384 <= stubsInLayer_z_V_q0;
        tmp_1_reg_412 <= stubsInLayer_phi_V_q0[ap_const_lv32_B];
        tmp_reg_417 <= {{stubsInLayer_phi_V_q0[ap_const_lv32_A : ap_const_lv32_9]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        allStubs_phi_V_ce0 = 1'b1;
    end else begin
        allStubs_phi_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        allStubs_phi_V_we0 = 1'b1;
    end else begin
        allStubs_phi_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        allStubs_pt_V_ce0 = 1'b1;
    end else begin
        allStubs_pt_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        allStubs_pt_V_we0 = 1'b1;
    end else begin
        allStubs_pt_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        allStubs_r_V_ce0 = 1'b1;
    end else begin
        allStubs_r_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        allStubs_r_V_we0 = 1'b1;
    end else begin
        allStubs_r_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        allStubs_z_V_ce0 = 1'b1;
    end else begin
        allStubs_z_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        allStubs_z_V_we0 = 1'b1;
    end else begin
        allStubs_z_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_19) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_165) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_185) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_210) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        stubsInLayer_phi_V_ce0 = 1'b1;
    end else begin
        stubsInLayer_phi_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        stubsInLayer_pt_V_ce0 = 1'b1;
    end else begin
        stubsInLayer_pt_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        stubsInLayer_r_V_ce0 = 1'b1;
    end else begin
        stubsInLayer_r_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        stubsInLayer_z_V_ce0 = 1'b1;
    end else begin
        stubsInLayer_z_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        vmStubsPH1Z1_index_V_ce0 = 1'b1;
    end else begin
        vmStubsPH1Z1_index_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_434 == 1'b0))) begin
        vmStubsPH1Z1_index_V_we0 = 1'b1;
    end else begin
        vmStubsPH1Z1_index_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        vmStubsPH1Z1_phi_V_ce0 = 1'b1;
    end else begin
        vmStubsPH1Z1_phi_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_434 == 1'b0))) begin
        vmStubsPH1Z1_phi_V_we0 = 1'b1;
    end else begin
        vmStubsPH1Z1_phi_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        vmStubsPH1Z1_pt_V_ce0 = 1'b1;
    end else begin
        vmStubsPH1Z1_pt_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(cond_fu_359_p2 == 1'b0))) begin
        vmStubsPH1Z1_pt_V_we0 = 1'b1;
    end else begin
        vmStubsPH1Z1_pt_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        vmStubsPH1Z1_r_V_ce0 = 1'b1;
    end else begin
        vmStubsPH1Z1_r_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & ~(cond_fu_359_p2 == 1'b0))) begin
        vmStubsPH1Z1_r_V_we0 = 1'b1;
    end else begin
        vmStubsPH1Z1_r_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        vmStubsPH1Z1_z_V_ce0 = 1'b1;
    end else begin
        vmStubsPH1Z1_z_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(cond_reg_434 == 1'b0))) begin
        vmStubsPH1Z1_z_V_we0 = 1'b1;
    end else begin
        vmStubsPH1Z1_z_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        vmStubsPH1Z2_index_V_ce0 = 1'b1;
    end else begin
        vmStubsPH1Z2_index_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_434 == 1'b0))) begin
        vmStubsPH1Z2_index_V_we0 = 1'b1;
    end else begin
        vmStubsPH1Z2_index_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        vmStubsPH1Z2_phi_V_ce0 = 1'b1;
    end else begin
        vmStubsPH1Z2_phi_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & (cond_reg_434 == 1'b0))) begin
        vmStubsPH1Z2_phi_V_we0 = 1'b1;
    end else begin
        vmStubsPH1Z2_phi_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        vmStubsPH1Z2_pt_V_ce0 = 1'b1;
    end else begin
        vmStubsPH1Z2_pt_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (cond_fu_359_p2 == 1'b0))) begin
        vmStubsPH1Z2_pt_V_we0 = 1'b1;
    end else begin
        vmStubsPH1Z2_pt_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        vmStubsPH1Z2_r_V_ce0 = 1'b1;
    end else begin
        vmStubsPH1Z2_r_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (cond_fu_359_p2 == 1'b0))) begin
        vmStubsPH1Z2_r_V_we0 = 1'b1;
    end else begin
        vmStubsPH1Z2_r_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        vmStubsPH1Z2_z_V_ce0 = 1'b1;
    end else begin
        vmStubsPH1Z2_z_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (cond_fu_359_p2 == 1'b0))) begin
        vmStubsPH1Z2_z_V_we0 = 1'b1;
    end else begin
        vmStubsPH1Z2_z_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign allStubs_phi_V_address0 = ap_const_lv64_0;

assign allStubs_phi_V_d0 = stubsInLayer_phi_V_load_reg_389;

assign allStubs_pt_V_address0 = ap_const_lv64_0;

assign allStubs_pt_V_d0 = stubsInLayer_pt_V_load_reg_399;

assign allStubs_r_V_address0 = ap_const_lv64_0;

assign allStubs_r_V_d0 = stubsInLayer_r_V_load_reg_394;

assign allStubs_z_V_address0 = ap_const_lv64_0;

assign allStubs_z_V_d0 = stubsInLayer_z_V_load_reg_384;

always @ (*) begin
    ap_sig_165 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_185 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_19 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_210 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign cond_fu_359_p2 = ((op2_V_read_assign_s_reg_406 == ap_const_lv4_0) ? 1'b1 : 1'b0);

assign op2_V_read_assign_fu_352_p3 = {{v_assign_6_fu_347_p2}, {tmp_reg_417}};

assign stubsInLayer_phi_V_address0 = ap_const_lv64_0;

assign stubsInLayer_pt_V_address0 = ap_const_lv64_0;

assign stubsInLayer_r_V_address0 = ap_const_lv64_0;

assign stubsInLayer_z_V_address0 = ap_const_lv64_0;

assign v_assign_6_fu_347_p2 = (tmp_1_reg_412 ^ 1'b1);

assign vmStubsPH1Z1_index_V_address0 = ap_const_lv64_0;

assign vmStubsPH1Z1_index_V_d0 = ap_const_lv6_0;

assign vmStubsPH1Z1_phi_V_address0 = ap_const_lv64_0;

assign vmStubsPH1Z1_phi_V_d0 = op2_V_read_assign_reg_428;

assign vmStubsPH1Z1_pt_V_address0 = ap_const_lv64_0;

assign vmStubsPH1Z1_pt_V_d0 = stubsInLayer_pt_V_load_reg_399;

assign vmStubsPH1Z1_r_V_address0 = ap_const_lv64_0;

assign vmStubsPH1Z1_r_V_d0 = op2_V_read_assign_1_reg_422;

assign vmStubsPH1Z1_z_V_address0 = ap_const_lv64_0;

assign vmStubsPH1Z1_z_V_d0 = ap_const_lv4_0;

assign vmStubsPH1Z2_index_V_address0 = ap_const_lv64_0;

assign vmStubsPH1Z2_index_V_d0 = ap_const_lv6_0;

assign vmStubsPH1Z2_phi_V_address0 = ap_const_lv64_0;

assign vmStubsPH1Z2_phi_V_d0 = op2_V_read_assign_reg_428;

assign vmStubsPH1Z2_pt_V_address0 = ap_const_lv64_0;

assign vmStubsPH1Z2_pt_V_d0 = stubsInLayer_pt_V_load_reg_399;

assign vmStubsPH1Z2_r_V_address0 = ap_const_lv64_0;

assign vmStubsPH1Z2_r_V_d0 = op2_V_read_assign_1_reg_422;

assign vmStubsPH1Z2_z_V_address0 = ap_const_lv64_0;

assign vmStubsPH1Z2_z_V_d0 = op2_V_read_assign_s_reg_406;

endmodule //VMRouter
