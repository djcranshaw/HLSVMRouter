// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _VMRouter_HH_
#define _VMRouter_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct VMRouter : public sc_module {
    // Port declarations 74
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<1> > stubsInLayer_z_V_address0;
    sc_out< sc_logic > stubsInLayer_z_V_ce0;
    sc_in< sc_lv<12> > stubsInLayer_z_V_q0;
    sc_out< sc_lv<1> > stubsInLayer_phi_V_address0;
    sc_out< sc_logic > stubsInLayer_phi_V_ce0;
    sc_in< sc_lv<14> > stubsInLayer_phi_V_q0;
    sc_out< sc_lv<1> > stubsInLayer_r_V_address0;
    sc_out< sc_logic > stubsInLayer_r_V_ce0;
    sc_in< sc_lv<7> > stubsInLayer_r_V_q0;
    sc_out< sc_lv<1> > stubsInLayer_pt_V_address0;
    sc_out< sc_logic > stubsInLayer_pt_V_ce0;
    sc_in< sc_lv<3> > stubsInLayer_pt_V_q0;
    sc_out< sc_lv<1> > allStubs_z_V_address0;
    sc_out< sc_logic > allStubs_z_V_ce0;
    sc_out< sc_logic > allStubs_z_V_we0;
    sc_out< sc_lv<12> > allStubs_z_V_d0;
    sc_out< sc_lv<1> > allStubs_phi_V_address0;
    sc_out< sc_logic > allStubs_phi_V_ce0;
    sc_out< sc_logic > allStubs_phi_V_we0;
    sc_out< sc_lv<14> > allStubs_phi_V_d0;
    sc_out< sc_lv<1> > allStubs_r_V_address0;
    sc_out< sc_logic > allStubs_r_V_ce0;
    sc_out< sc_logic > allStubs_r_V_we0;
    sc_out< sc_lv<7> > allStubs_r_V_d0;
    sc_out< sc_lv<1> > allStubs_pt_V_address0;
    sc_out< sc_logic > allStubs_pt_V_ce0;
    sc_out< sc_logic > allStubs_pt_V_we0;
    sc_out< sc_lv<3> > allStubs_pt_V_d0;
    sc_out< sc_lv<1> > vmStubsPH1Z1_z_V_address0;
    sc_out< sc_logic > vmStubsPH1Z1_z_V_ce0;
    sc_out< sc_logic > vmStubsPH1Z1_z_V_we0;
    sc_out< sc_lv<4> > vmStubsPH1Z1_z_V_d0;
    sc_out< sc_lv<1> > vmStubsPH1Z1_phi_V_address0;
    sc_out< sc_logic > vmStubsPH1Z1_phi_V_ce0;
    sc_out< sc_logic > vmStubsPH1Z1_phi_V_we0;
    sc_out< sc_lv<3> > vmStubsPH1Z1_phi_V_d0;
    sc_out< sc_lv<1> > vmStubsPH1Z1_r_V_address0;
    sc_out< sc_logic > vmStubsPH1Z1_r_V_ce0;
    sc_out< sc_logic > vmStubsPH1Z1_r_V_we0;
    sc_out< sc_lv<2> > vmStubsPH1Z1_r_V_d0;
    sc_out< sc_lv<1> > vmStubsPH1Z1_pt_V_address0;
    sc_out< sc_logic > vmStubsPH1Z1_pt_V_ce0;
    sc_out< sc_logic > vmStubsPH1Z1_pt_V_we0;
    sc_out< sc_lv<3> > vmStubsPH1Z1_pt_V_d0;
    sc_out< sc_lv<1> > vmStubsPH1Z1_index_V_address0;
    sc_out< sc_logic > vmStubsPH1Z1_index_V_ce0;
    sc_out< sc_logic > vmStubsPH1Z1_index_V_we0;
    sc_out< sc_lv<6> > vmStubsPH1Z1_index_V_d0;
    sc_out< sc_lv<1> > vmStubsPH1Z2_z_V_address0;
    sc_out< sc_logic > vmStubsPH1Z2_z_V_ce0;
    sc_out< sc_logic > vmStubsPH1Z2_z_V_we0;
    sc_out< sc_lv<4> > vmStubsPH1Z2_z_V_d0;
    sc_out< sc_lv<1> > vmStubsPH1Z2_phi_V_address0;
    sc_out< sc_logic > vmStubsPH1Z2_phi_V_ce0;
    sc_out< sc_logic > vmStubsPH1Z2_phi_V_we0;
    sc_out< sc_lv<3> > vmStubsPH1Z2_phi_V_d0;
    sc_out< sc_lv<1> > vmStubsPH1Z2_r_V_address0;
    sc_out< sc_logic > vmStubsPH1Z2_r_V_ce0;
    sc_out< sc_logic > vmStubsPH1Z2_r_V_we0;
    sc_out< sc_lv<2> > vmStubsPH1Z2_r_V_d0;
    sc_out< sc_lv<1> > vmStubsPH1Z2_pt_V_address0;
    sc_out< sc_logic > vmStubsPH1Z2_pt_V_ce0;
    sc_out< sc_logic > vmStubsPH1Z2_pt_V_we0;
    sc_out< sc_lv<3> > vmStubsPH1Z2_pt_V_d0;
    sc_out< sc_lv<1> > vmStubsPH1Z2_index_V_address0;
    sc_out< sc_logic > vmStubsPH1Z2_index_V_ce0;
    sc_out< sc_logic > vmStubsPH1Z2_index_V_we0;
    sc_out< sc_lv<6> > vmStubsPH1Z2_index_V_d0;


    // Module declarations
    VMRouter(sc_module_name name);
    SC_HAS_PROCESS(VMRouter);

    ~VMRouter();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_19;
    sc_signal< sc_lv<12> > stubsInLayer_z_V_load_reg_384;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_165;
    sc_signal< sc_lv<14> > stubsInLayer_phi_V_load_reg_389;
    sc_signal< sc_lv<7> > stubsInLayer_r_V_load_reg_394;
    sc_signal< sc_lv<3> > stubsInLayer_pt_V_load_reg_399;
    sc_signal< sc_lv<4> > op2_V_read_assign_s_reg_406;
    sc_signal< sc_lv<1> > tmp_1_reg_412;
    sc_signal< sc_lv<2> > tmp_reg_417;
    sc_signal< sc_lv<2> > op2_V_read_assign_1_reg_422;
    sc_signal< sc_lv<3> > op2_V_read_assign_fu_352_p3;
    sc_signal< sc_lv<3> > op2_V_read_assign_reg_428;
    sc_signal< sc_logic > ap_sig_cseq_ST_st3_fsm_2;
    sc_signal< bool > ap_sig_185;
    sc_signal< sc_lv<1> > cond_fu_359_p2;
    sc_signal< sc_lv<1> > cond_reg_434;
    sc_signal< sc_logic > ap_sig_cseq_ST_st4_fsm_3;
    sc_signal< bool > ap_sig_210;
    sc_signal< sc_lv<1> > v_assign_6_fu_347_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_st1_fsm_0;
    static const sc_lv<4> ap_ST_st2_fsm_1;
    static const sc_lv<4> ap_ST_st3_fsm_2;
    static const sc_lv<4> ap_ST_st4_fsm_3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_6;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_allStubs_phi_V_address0();
    void thread_allStubs_phi_V_ce0();
    void thread_allStubs_phi_V_d0();
    void thread_allStubs_phi_V_we0();
    void thread_allStubs_pt_V_address0();
    void thread_allStubs_pt_V_ce0();
    void thread_allStubs_pt_V_d0();
    void thread_allStubs_pt_V_we0();
    void thread_allStubs_r_V_address0();
    void thread_allStubs_r_V_ce0();
    void thread_allStubs_r_V_d0();
    void thread_allStubs_r_V_we0();
    void thread_allStubs_z_V_address0();
    void thread_allStubs_z_V_ce0();
    void thread_allStubs_z_V_d0();
    void thread_allStubs_z_V_we0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_165();
    void thread_ap_sig_185();
    void thread_ap_sig_19();
    void thread_ap_sig_210();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_cseq_ST_st3_fsm_2();
    void thread_ap_sig_cseq_ST_st4_fsm_3();
    void thread_cond_fu_359_p2();
    void thread_op2_V_read_assign_fu_352_p3();
    void thread_stubsInLayer_phi_V_address0();
    void thread_stubsInLayer_phi_V_ce0();
    void thread_stubsInLayer_pt_V_address0();
    void thread_stubsInLayer_pt_V_ce0();
    void thread_stubsInLayer_r_V_address0();
    void thread_stubsInLayer_r_V_ce0();
    void thread_stubsInLayer_z_V_address0();
    void thread_stubsInLayer_z_V_ce0();
    void thread_v_assign_6_fu_347_p2();
    void thread_vmStubsPH1Z1_index_V_address0();
    void thread_vmStubsPH1Z1_index_V_ce0();
    void thread_vmStubsPH1Z1_index_V_d0();
    void thread_vmStubsPH1Z1_index_V_we0();
    void thread_vmStubsPH1Z1_phi_V_address0();
    void thread_vmStubsPH1Z1_phi_V_ce0();
    void thread_vmStubsPH1Z1_phi_V_d0();
    void thread_vmStubsPH1Z1_phi_V_we0();
    void thread_vmStubsPH1Z1_pt_V_address0();
    void thread_vmStubsPH1Z1_pt_V_ce0();
    void thread_vmStubsPH1Z1_pt_V_d0();
    void thread_vmStubsPH1Z1_pt_V_we0();
    void thread_vmStubsPH1Z1_r_V_address0();
    void thread_vmStubsPH1Z1_r_V_ce0();
    void thread_vmStubsPH1Z1_r_V_d0();
    void thread_vmStubsPH1Z1_r_V_we0();
    void thread_vmStubsPH1Z1_z_V_address0();
    void thread_vmStubsPH1Z1_z_V_ce0();
    void thread_vmStubsPH1Z1_z_V_d0();
    void thread_vmStubsPH1Z1_z_V_we0();
    void thread_vmStubsPH1Z2_index_V_address0();
    void thread_vmStubsPH1Z2_index_V_ce0();
    void thread_vmStubsPH1Z2_index_V_d0();
    void thread_vmStubsPH1Z2_index_V_we0();
    void thread_vmStubsPH1Z2_phi_V_address0();
    void thread_vmStubsPH1Z2_phi_V_ce0();
    void thread_vmStubsPH1Z2_phi_V_d0();
    void thread_vmStubsPH1Z2_phi_V_we0();
    void thread_vmStubsPH1Z2_pt_V_address0();
    void thread_vmStubsPH1Z2_pt_V_ce0();
    void thread_vmStubsPH1Z2_pt_V_d0();
    void thread_vmStubsPH1Z2_pt_V_we0();
    void thread_vmStubsPH1Z2_r_V_address0();
    void thread_vmStubsPH1Z2_r_V_ce0();
    void thread_vmStubsPH1Z2_r_V_d0();
    void thread_vmStubsPH1Z2_r_V_we0();
    void thread_vmStubsPH1Z2_z_V_address0();
    void thread_vmStubsPH1Z2_z_V_ce0();
    void thread_vmStubsPH1Z2_z_V_d0();
    void thread_vmStubsPH1Z2_z_V_we0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
