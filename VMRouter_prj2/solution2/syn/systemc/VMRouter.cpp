// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "VMRouter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic VMRouter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic VMRouter::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> VMRouter::ap_ST_st1_fsm_0 = "1";
const sc_lv<4> VMRouter::ap_ST_st2_fsm_1 = "10";
const sc_lv<4> VMRouter::ap_ST_st3_fsm_2 = "100";
const sc_lv<4> VMRouter::ap_ST_st4_fsm_3 = "1000";
const sc_lv<32> VMRouter::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> VMRouter::ap_const_lv1_1 = "1";
const sc_lv<32> VMRouter::ap_const_lv32_1 = "1";
const sc_lv<32> VMRouter::ap_const_lv32_2 = "10";
const sc_lv<64> VMRouter::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> VMRouter::ap_const_lv1_0 = "0";
const sc_lv<32> VMRouter::ap_const_lv32_3 = "11";
const sc_lv<6> VMRouter::ap_const_lv6_0 = "000000";
const sc_lv<4> VMRouter::ap_const_lv4_0 = "0000";
const sc_lv<32> VMRouter::ap_const_lv32_5 = "101";
const sc_lv<32> VMRouter::ap_const_lv32_8 = "1000";
const sc_lv<32> VMRouter::ap_const_lv32_B = "1011";
const sc_lv<32> VMRouter::ap_const_lv32_9 = "1001";
const sc_lv<32> VMRouter::ap_const_lv32_A = "1010";
const sc_lv<32> VMRouter::ap_const_lv32_6 = "110";

VMRouter::VMRouter(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_allStubs_phi_V_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_allStubs_phi_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_allStubs_phi_V_d0);
    sensitive << ( stubsInLayer_phi_V_load_reg_389 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_allStubs_phi_V_we0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_allStubs_pt_V_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_allStubs_pt_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_allStubs_pt_V_d0);
    sensitive << ( stubsInLayer_pt_V_load_reg_399 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_allStubs_pt_V_we0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_allStubs_r_V_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_allStubs_r_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_allStubs_r_V_d0);
    sensitive << ( stubsInLayer_r_V_load_reg_394 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_allStubs_r_V_we0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_allStubs_z_V_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_allStubs_z_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_allStubs_z_V_d0);
    sensitive << ( stubsInLayer_z_V_load_reg_384 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_allStubs_z_V_we0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_ap_sig_165);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_185);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_210);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_sig_cseq_ST_st1_fsm_0);
    sensitive << ( ap_sig_19 );

    SC_METHOD(thread_ap_sig_cseq_ST_st2_fsm_1);
    sensitive << ( ap_sig_165 );

    SC_METHOD(thread_ap_sig_cseq_ST_st3_fsm_2);
    sensitive << ( ap_sig_185 );

    SC_METHOD(thread_ap_sig_cseq_ST_st4_fsm_3);
    sensitive << ( ap_sig_210 );

    SC_METHOD(thread_cond_fu_359_p2);
    sensitive << ( op2_V_read_assign_s_reg_406 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_op2_V_read_assign_fu_352_p3);
    sensitive << ( tmp_reg_417 );
    sensitive << ( v_assign_6_fu_347_p2 );

    SC_METHOD(thread_stubsInLayer_phi_V_address0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_stubsInLayer_phi_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_stubsInLayer_pt_V_address0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_stubsInLayer_pt_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_stubsInLayer_r_V_address0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_stubsInLayer_r_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_stubsInLayer_z_V_address0);
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_stubsInLayer_z_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_sig_cseq_ST_st1_fsm_0 );

    SC_METHOD(thread_v_assign_6_fu_347_p2);
    sensitive << ( tmp_1_reg_412 );

    SC_METHOD(thread_vmStubsPH1Z1_index_V_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z1_index_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z1_index_V_d0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z1_index_V_we0);
    sensitive << ( cond_reg_434 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z1_phi_V_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z1_phi_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z1_phi_V_d0);
    sensitive << ( op2_V_read_assign_reg_428 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z1_phi_V_we0);
    sensitive << ( cond_reg_434 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z1_pt_V_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_vmStubsPH1Z1_pt_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_vmStubsPH1Z1_pt_V_d0);
    sensitive << ( stubsInLayer_pt_V_load_reg_399 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_vmStubsPH1Z1_pt_V_we0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( cond_fu_359_p2 );

    SC_METHOD(thread_vmStubsPH1Z1_r_V_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_vmStubsPH1Z1_r_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_vmStubsPH1Z1_r_V_d0);
    sensitive << ( op2_V_read_assign_1_reg_422 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_vmStubsPH1Z1_r_V_we0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( cond_fu_359_p2 );

    SC_METHOD(thread_vmStubsPH1Z1_z_V_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z1_z_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z1_z_V_d0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z1_z_V_we0);
    sensitive << ( cond_reg_434 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z2_index_V_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z2_index_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z2_index_V_d0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z2_index_V_we0);
    sensitive << ( cond_reg_434 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z2_phi_V_address0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z2_phi_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z2_phi_V_d0);
    sensitive << ( op2_V_read_assign_reg_428 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z2_phi_V_we0);
    sensitive << ( cond_reg_434 );
    sensitive << ( ap_sig_cseq_ST_st4_fsm_3 );

    SC_METHOD(thread_vmStubsPH1Z2_pt_V_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_vmStubsPH1Z2_pt_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_vmStubsPH1Z2_pt_V_d0);
    sensitive << ( stubsInLayer_pt_V_load_reg_399 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_vmStubsPH1Z2_pt_V_we0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( cond_fu_359_p2 );

    SC_METHOD(thread_vmStubsPH1Z2_r_V_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_vmStubsPH1Z2_r_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_vmStubsPH1Z2_r_V_d0);
    sensitive << ( op2_V_read_assign_1_reg_422 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_vmStubsPH1Z2_r_V_we0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( cond_fu_359_p2 );

    SC_METHOD(thread_vmStubsPH1Z2_z_V_address0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_vmStubsPH1Z2_z_V_ce0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_vmStubsPH1Z2_z_V_d0);
    sensitive << ( op2_V_read_assign_s_reg_406 );
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );

    SC_METHOD(thread_vmStubsPH1Z2_z_V_we0);
    sensitive << ( ap_sig_cseq_ST_st3_fsm_2 );
    sensitive << ( cond_fu_359_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "VMRouter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, stubsInLayer_z_V_address0, "(port)stubsInLayer_z_V_address0");
    sc_trace(mVcdFile, stubsInLayer_z_V_ce0, "(port)stubsInLayer_z_V_ce0");
    sc_trace(mVcdFile, stubsInLayer_z_V_q0, "(port)stubsInLayer_z_V_q0");
    sc_trace(mVcdFile, stubsInLayer_phi_V_address0, "(port)stubsInLayer_phi_V_address0");
    sc_trace(mVcdFile, stubsInLayer_phi_V_ce0, "(port)stubsInLayer_phi_V_ce0");
    sc_trace(mVcdFile, stubsInLayer_phi_V_q0, "(port)stubsInLayer_phi_V_q0");
    sc_trace(mVcdFile, stubsInLayer_r_V_address0, "(port)stubsInLayer_r_V_address0");
    sc_trace(mVcdFile, stubsInLayer_r_V_ce0, "(port)stubsInLayer_r_V_ce0");
    sc_trace(mVcdFile, stubsInLayer_r_V_q0, "(port)stubsInLayer_r_V_q0");
    sc_trace(mVcdFile, stubsInLayer_pt_V_address0, "(port)stubsInLayer_pt_V_address0");
    sc_trace(mVcdFile, stubsInLayer_pt_V_ce0, "(port)stubsInLayer_pt_V_ce0");
    sc_trace(mVcdFile, stubsInLayer_pt_V_q0, "(port)stubsInLayer_pt_V_q0");
    sc_trace(mVcdFile, allStubs_z_V_address0, "(port)allStubs_z_V_address0");
    sc_trace(mVcdFile, allStubs_z_V_ce0, "(port)allStubs_z_V_ce0");
    sc_trace(mVcdFile, allStubs_z_V_we0, "(port)allStubs_z_V_we0");
    sc_trace(mVcdFile, allStubs_z_V_d0, "(port)allStubs_z_V_d0");
    sc_trace(mVcdFile, allStubs_phi_V_address0, "(port)allStubs_phi_V_address0");
    sc_trace(mVcdFile, allStubs_phi_V_ce0, "(port)allStubs_phi_V_ce0");
    sc_trace(mVcdFile, allStubs_phi_V_we0, "(port)allStubs_phi_V_we0");
    sc_trace(mVcdFile, allStubs_phi_V_d0, "(port)allStubs_phi_V_d0");
    sc_trace(mVcdFile, allStubs_r_V_address0, "(port)allStubs_r_V_address0");
    sc_trace(mVcdFile, allStubs_r_V_ce0, "(port)allStubs_r_V_ce0");
    sc_trace(mVcdFile, allStubs_r_V_we0, "(port)allStubs_r_V_we0");
    sc_trace(mVcdFile, allStubs_r_V_d0, "(port)allStubs_r_V_d0");
    sc_trace(mVcdFile, allStubs_pt_V_address0, "(port)allStubs_pt_V_address0");
    sc_trace(mVcdFile, allStubs_pt_V_ce0, "(port)allStubs_pt_V_ce0");
    sc_trace(mVcdFile, allStubs_pt_V_we0, "(port)allStubs_pt_V_we0");
    sc_trace(mVcdFile, allStubs_pt_V_d0, "(port)allStubs_pt_V_d0");
    sc_trace(mVcdFile, vmStubsPH1Z1_z_V_address0, "(port)vmStubsPH1Z1_z_V_address0");
    sc_trace(mVcdFile, vmStubsPH1Z1_z_V_ce0, "(port)vmStubsPH1Z1_z_V_ce0");
    sc_trace(mVcdFile, vmStubsPH1Z1_z_V_we0, "(port)vmStubsPH1Z1_z_V_we0");
    sc_trace(mVcdFile, vmStubsPH1Z1_z_V_d0, "(port)vmStubsPH1Z1_z_V_d0");
    sc_trace(mVcdFile, vmStubsPH1Z1_phi_V_address0, "(port)vmStubsPH1Z1_phi_V_address0");
    sc_trace(mVcdFile, vmStubsPH1Z1_phi_V_ce0, "(port)vmStubsPH1Z1_phi_V_ce0");
    sc_trace(mVcdFile, vmStubsPH1Z1_phi_V_we0, "(port)vmStubsPH1Z1_phi_V_we0");
    sc_trace(mVcdFile, vmStubsPH1Z1_phi_V_d0, "(port)vmStubsPH1Z1_phi_V_d0");
    sc_trace(mVcdFile, vmStubsPH1Z1_r_V_address0, "(port)vmStubsPH1Z1_r_V_address0");
    sc_trace(mVcdFile, vmStubsPH1Z1_r_V_ce0, "(port)vmStubsPH1Z1_r_V_ce0");
    sc_trace(mVcdFile, vmStubsPH1Z1_r_V_we0, "(port)vmStubsPH1Z1_r_V_we0");
    sc_trace(mVcdFile, vmStubsPH1Z1_r_V_d0, "(port)vmStubsPH1Z1_r_V_d0");
    sc_trace(mVcdFile, vmStubsPH1Z1_pt_V_address0, "(port)vmStubsPH1Z1_pt_V_address0");
    sc_trace(mVcdFile, vmStubsPH1Z1_pt_V_ce0, "(port)vmStubsPH1Z1_pt_V_ce0");
    sc_trace(mVcdFile, vmStubsPH1Z1_pt_V_we0, "(port)vmStubsPH1Z1_pt_V_we0");
    sc_trace(mVcdFile, vmStubsPH1Z1_pt_V_d0, "(port)vmStubsPH1Z1_pt_V_d0");
    sc_trace(mVcdFile, vmStubsPH1Z1_index_V_address0, "(port)vmStubsPH1Z1_index_V_address0");
    sc_trace(mVcdFile, vmStubsPH1Z1_index_V_ce0, "(port)vmStubsPH1Z1_index_V_ce0");
    sc_trace(mVcdFile, vmStubsPH1Z1_index_V_we0, "(port)vmStubsPH1Z1_index_V_we0");
    sc_trace(mVcdFile, vmStubsPH1Z1_index_V_d0, "(port)vmStubsPH1Z1_index_V_d0");
    sc_trace(mVcdFile, vmStubsPH1Z2_z_V_address0, "(port)vmStubsPH1Z2_z_V_address0");
    sc_trace(mVcdFile, vmStubsPH1Z2_z_V_ce0, "(port)vmStubsPH1Z2_z_V_ce0");
    sc_trace(mVcdFile, vmStubsPH1Z2_z_V_we0, "(port)vmStubsPH1Z2_z_V_we0");
    sc_trace(mVcdFile, vmStubsPH1Z2_z_V_d0, "(port)vmStubsPH1Z2_z_V_d0");
    sc_trace(mVcdFile, vmStubsPH1Z2_phi_V_address0, "(port)vmStubsPH1Z2_phi_V_address0");
    sc_trace(mVcdFile, vmStubsPH1Z2_phi_V_ce0, "(port)vmStubsPH1Z2_phi_V_ce0");
    sc_trace(mVcdFile, vmStubsPH1Z2_phi_V_we0, "(port)vmStubsPH1Z2_phi_V_we0");
    sc_trace(mVcdFile, vmStubsPH1Z2_phi_V_d0, "(port)vmStubsPH1Z2_phi_V_d0");
    sc_trace(mVcdFile, vmStubsPH1Z2_r_V_address0, "(port)vmStubsPH1Z2_r_V_address0");
    sc_trace(mVcdFile, vmStubsPH1Z2_r_V_ce0, "(port)vmStubsPH1Z2_r_V_ce0");
    sc_trace(mVcdFile, vmStubsPH1Z2_r_V_we0, "(port)vmStubsPH1Z2_r_V_we0");
    sc_trace(mVcdFile, vmStubsPH1Z2_r_V_d0, "(port)vmStubsPH1Z2_r_V_d0");
    sc_trace(mVcdFile, vmStubsPH1Z2_pt_V_address0, "(port)vmStubsPH1Z2_pt_V_address0");
    sc_trace(mVcdFile, vmStubsPH1Z2_pt_V_ce0, "(port)vmStubsPH1Z2_pt_V_ce0");
    sc_trace(mVcdFile, vmStubsPH1Z2_pt_V_we0, "(port)vmStubsPH1Z2_pt_V_we0");
    sc_trace(mVcdFile, vmStubsPH1Z2_pt_V_d0, "(port)vmStubsPH1Z2_pt_V_d0");
    sc_trace(mVcdFile, vmStubsPH1Z2_index_V_address0, "(port)vmStubsPH1Z2_index_V_address0");
    sc_trace(mVcdFile, vmStubsPH1Z2_index_V_ce0, "(port)vmStubsPH1Z2_index_V_ce0");
    sc_trace(mVcdFile, vmStubsPH1Z2_index_V_we0, "(port)vmStubsPH1Z2_index_V_we0");
    sc_trace(mVcdFile, vmStubsPH1Z2_index_V_d0, "(port)vmStubsPH1Z2_index_V_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st1_fsm_0, "ap_sig_cseq_ST_st1_fsm_0");
    sc_trace(mVcdFile, ap_sig_19, "ap_sig_19");
    sc_trace(mVcdFile, stubsInLayer_z_V_load_reg_384, "stubsInLayer_z_V_load_reg_384");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st2_fsm_1, "ap_sig_cseq_ST_st2_fsm_1");
    sc_trace(mVcdFile, ap_sig_165, "ap_sig_165");
    sc_trace(mVcdFile, stubsInLayer_phi_V_load_reg_389, "stubsInLayer_phi_V_load_reg_389");
    sc_trace(mVcdFile, stubsInLayer_r_V_load_reg_394, "stubsInLayer_r_V_load_reg_394");
    sc_trace(mVcdFile, stubsInLayer_pt_V_load_reg_399, "stubsInLayer_pt_V_load_reg_399");
    sc_trace(mVcdFile, op2_V_read_assign_s_reg_406, "op2_V_read_assign_s_reg_406");
    sc_trace(mVcdFile, tmp_1_reg_412, "tmp_1_reg_412");
    sc_trace(mVcdFile, tmp_reg_417, "tmp_reg_417");
    sc_trace(mVcdFile, op2_V_read_assign_1_reg_422, "op2_V_read_assign_1_reg_422");
    sc_trace(mVcdFile, op2_V_read_assign_fu_352_p3, "op2_V_read_assign_fu_352_p3");
    sc_trace(mVcdFile, op2_V_read_assign_reg_428, "op2_V_read_assign_reg_428");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st3_fsm_2, "ap_sig_cseq_ST_st3_fsm_2");
    sc_trace(mVcdFile, ap_sig_185, "ap_sig_185");
    sc_trace(mVcdFile, cond_fu_359_p2, "cond_fu_359_p2");
    sc_trace(mVcdFile, cond_reg_434, "cond_reg_434");
    sc_trace(mVcdFile, ap_sig_cseq_ST_st4_fsm_3, "ap_sig_cseq_ST_st4_fsm_3");
    sc_trace(mVcdFile, ap_sig_210, "ap_sig_210");
    sc_trace(mVcdFile, v_assign_6_fu_347_p2, "v_assign_6_fu_347_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("VMRouter.hdltvin.dat");
    mHdltvoutHandle.open("VMRouter.hdltvout.dat");
}

VMRouter::~VMRouter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void VMRouter::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        cond_reg_434 = cond_fu_359_p2.read();
        op2_V_read_assign_reg_428 = op2_V_read_assign_fu_352_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st2_fsm_1.read())) {
        op2_V_read_assign_1_reg_422 = stubsInLayer_r_V_q0.read().range(6, 5);
        op2_V_read_assign_s_reg_406 = stubsInLayer_z_V_q0.read().range(8, 5);
        stubsInLayer_phi_V_load_reg_389 = stubsInLayer_phi_V_q0.read();
        stubsInLayer_pt_V_load_reg_399 = stubsInLayer_pt_V_q0.read();
        stubsInLayer_r_V_load_reg_394 = stubsInLayer_r_V_q0.read();
        stubsInLayer_z_V_load_reg_384 = stubsInLayer_z_V_q0.read();
        tmp_1_reg_412 = stubsInLayer_phi_V_q0.read().range(11, 11);
        tmp_reg_417 = stubsInLayer_phi_V_q0.read().range(10, 9);
    }
}

void VMRouter::thread_allStubs_phi_V_address0() {
    allStubs_phi_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_allStubs_phi_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        allStubs_phi_V_ce0 = ap_const_logic_1;
    } else {
        allStubs_phi_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_allStubs_phi_V_d0() {
    allStubs_phi_V_d0 = stubsInLayer_phi_V_load_reg_389.read();
}

void VMRouter::thread_allStubs_phi_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()))) {
        allStubs_phi_V_we0 = ap_const_logic_1;
    } else {
        allStubs_phi_V_we0 = ap_const_logic_0;
    }
}

void VMRouter::thread_allStubs_pt_V_address0() {
    allStubs_pt_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_allStubs_pt_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        allStubs_pt_V_ce0 = ap_const_logic_1;
    } else {
        allStubs_pt_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_allStubs_pt_V_d0() {
    allStubs_pt_V_d0 = stubsInLayer_pt_V_load_reg_399.read();
}

void VMRouter::thread_allStubs_pt_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()))) {
        allStubs_pt_V_we0 = ap_const_logic_1;
    } else {
        allStubs_pt_V_we0 = ap_const_logic_0;
    }
}

void VMRouter::thread_allStubs_r_V_address0() {
    allStubs_r_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_allStubs_r_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        allStubs_r_V_ce0 = ap_const_logic_1;
    } else {
        allStubs_r_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_allStubs_r_V_d0() {
    allStubs_r_V_d0 = stubsInLayer_r_V_load_reg_394.read();
}

void VMRouter::thread_allStubs_r_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()))) {
        allStubs_r_V_we0 = ap_const_logic_1;
    } else {
        allStubs_r_V_we0 = ap_const_logic_0;
    }
}

void VMRouter::thread_allStubs_z_V_address0() {
    allStubs_z_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_allStubs_z_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        allStubs_z_V_ce0 = ap_const_logic_1;
    } else {
        allStubs_z_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_allStubs_z_V_d0() {
    allStubs_z_V_d0 = stubsInLayer_z_V_load_reg_384.read();
}

void VMRouter::thread_allStubs_z_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()))) {
        allStubs_z_V_we0 = ap_const_logic_1;
    } else {
        allStubs_z_V_we0 = ap_const_logic_0;
    }
}

void VMRouter::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void VMRouter::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void VMRouter::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void VMRouter::thread_ap_sig_165() {
    ap_sig_165 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(1, 1));
}

void VMRouter::thread_ap_sig_185() {
    ap_sig_185 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(2, 2));
}

void VMRouter::thread_ap_sig_19() {
    ap_sig_19 = esl_seteq<1,1,1>(ap_CS_fsm.read().range(0, 0), ap_const_lv1_1);
}

void VMRouter::thread_ap_sig_210() {
    ap_sig_210 = esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm.read().range(3, 3));
}

void VMRouter::thread_ap_sig_cseq_ST_st1_fsm_0() {
    if (ap_sig_19.read()) {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    }
}

void VMRouter::thread_ap_sig_cseq_ST_st2_fsm_1() {
    if (ap_sig_165.read()) {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    }
}

void VMRouter::thread_ap_sig_cseq_ST_st3_fsm_2() {
    if (ap_sig_185.read()) {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    }
}

void VMRouter::thread_ap_sig_cseq_ST_st4_fsm_3() {
    if (ap_sig_210.read()) {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    } else {
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    }
}

void VMRouter::thread_cond_fu_359_p2() {
    cond_fu_359_p2 = (!op2_V_read_assign_s_reg_406.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(op2_V_read_assign_s_reg_406.read() == ap_const_lv4_0);
}

void VMRouter::thread_op2_V_read_assign_fu_352_p3() {
    op2_V_read_assign_fu_352_p3 = esl_concat<1,2>(v_assign_6_fu_347_p2.read(), tmp_reg_417.read());
}

void VMRouter::thread_stubsInLayer_phi_V_address0() {
    stubsInLayer_phi_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_stubsInLayer_phi_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        stubsInLayer_phi_V_ce0 = ap_const_logic_1;
    } else {
        stubsInLayer_phi_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_stubsInLayer_pt_V_address0() {
    stubsInLayer_pt_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_stubsInLayer_pt_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        stubsInLayer_pt_V_ce0 = ap_const_logic_1;
    } else {
        stubsInLayer_pt_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_stubsInLayer_r_V_address0() {
    stubsInLayer_r_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_stubsInLayer_r_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        stubsInLayer_r_V_ce0 = ap_const_logic_1;
    } else {
        stubsInLayer_r_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_stubsInLayer_z_V_address0() {
    stubsInLayer_z_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_stubsInLayer_z_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st1_fsm_0.read()) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        stubsInLayer_z_V_ce0 = ap_const_logic_1;
    } else {
        stubsInLayer_z_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_v_assign_6_fu_347_p2() {
    v_assign_6_fu_347_p2 = (tmp_1_reg_412.read() ^ ap_const_lv1_1);
}

void VMRouter::thread_vmStubsPH1Z1_index_V_address0() {
    vmStubsPH1Z1_index_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_vmStubsPH1Z1_index_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        vmStubsPH1Z1_index_V_ce0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z1_index_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z1_index_V_d0() {
    vmStubsPH1Z1_index_V_d0 = ap_const_lv6_0;
}

void VMRouter::thread_vmStubsPH1Z1_index_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          !esl_seteq<1,1,1>(cond_reg_434.read(), ap_const_lv1_0)))) {
        vmStubsPH1Z1_index_V_we0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z1_index_V_we0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z1_phi_V_address0() {
    vmStubsPH1Z1_phi_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_vmStubsPH1Z1_phi_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        vmStubsPH1Z1_phi_V_ce0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z1_phi_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z1_phi_V_d0() {
    vmStubsPH1Z1_phi_V_d0 = op2_V_read_assign_reg_428.read();
}

void VMRouter::thread_vmStubsPH1Z1_phi_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          !esl_seteq<1,1,1>(cond_reg_434.read(), ap_const_lv1_0)))) {
        vmStubsPH1Z1_phi_V_we0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z1_phi_V_we0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z1_pt_V_address0() {
    vmStubsPH1Z1_pt_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_vmStubsPH1Z1_pt_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        vmStubsPH1Z1_pt_V_ce0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z1_pt_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z1_pt_V_d0() {
    vmStubsPH1Z1_pt_V_d0 = stubsInLayer_pt_V_load_reg_399.read();
}

void VMRouter::thread_vmStubsPH1Z1_pt_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
          !esl_seteq<1,1,1>(cond_fu_359_p2.read(), ap_const_lv1_0)))) {
        vmStubsPH1Z1_pt_V_we0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z1_pt_V_we0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z1_r_V_address0() {
    vmStubsPH1Z1_r_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_vmStubsPH1Z1_r_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        vmStubsPH1Z1_r_V_ce0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z1_r_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z1_r_V_d0() {
    vmStubsPH1Z1_r_V_d0 = op2_V_read_assign_1_reg_422.read();
}

void VMRouter::thread_vmStubsPH1Z1_r_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
          !esl_seteq<1,1,1>(cond_fu_359_p2.read(), ap_const_lv1_0)))) {
        vmStubsPH1Z1_r_V_we0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z1_r_V_we0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z1_z_V_address0() {
    vmStubsPH1Z1_z_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_vmStubsPH1Z1_z_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        vmStubsPH1Z1_z_V_ce0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z1_z_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z1_z_V_d0() {
    vmStubsPH1Z1_z_V_d0 = ap_const_lv4_0;
}

void VMRouter::thread_vmStubsPH1Z1_z_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          !esl_seteq<1,1,1>(cond_reg_434.read(), ap_const_lv1_0)))) {
        vmStubsPH1Z1_z_V_we0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z1_z_V_we0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z2_index_V_address0() {
    vmStubsPH1Z2_index_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_vmStubsPH1Z2_index_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        vmStubsPH1Z2_index_V_ce0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z2_index_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z2_index_V_d0() {
    vmStubsPH1Z2_index_V_d0 = ap_const_lv6_0;
}

void VMRouter::thread_vmStubsPH1Z2_index_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          esl_seteq<1,1,1>(cond_reg_434.read(), ap_const_lv1_0)))) {
        vmStubsPH1Z2_index_V_we0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z2_index_V_we0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z2_phi_V_address0() {
    vmStubsPH1Z2_phi_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_vmStubsPH1Z2_phi_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read())) {
        vmStubsPH1Z2_phi_V_ce0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z2_phi_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z2_phi_V_d0() {
    vmStubsPH1Z2_phi_V_d0 = op2_V_read_assign_reg_428.read();
}

void VMRouter::thread_vmStubsPH1Z2_phi_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st4_fsm_3.read()) && 
          esl_seteq<1,1,1>(cond_reg_434.read(), ap_const_lv1_0)))) {
        vmStubsPH1Z2_phi_V_we0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z2_phi_V_we0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z2_pt_V_address0() {
    vmStubsPH1Z2_pt_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_vmStubsPH1Z2_pt_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        vmStubsPH1Z2_pt_V_ce0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z2_pt_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z2_pt_V_d0() {
    vmStubsPH1Z2_pt_V_d0 = stubsInLayer_pt_V_load_reg_399.read();
}

void VMRouter::thread_vmStubsPH1Z2_pt_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
          esl_seteq<1,1,1>(cond_fu_359_p2.read(), ap_const_lv1_0)))) {
        vmStubsPH1Z2_pt_V_we0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z2_pt_V_we0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z2_r_V_address0() {
    vmStubsPH1Z2_r_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_vmStubsPH1Z2_r_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        vmStubsPH1Z2_r_V_ce0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z2_r_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z2_r_V_d0() {
    vmStubsPH1Z2_r_V_d0 = op2_V_read_assign_1_reg_422.read();
}

void VMRouter::thread_vmStubsPH1Z2_r_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
          esl_seteq<1,1,1>(cond_fu_359_p2.read(), ap_const_lv1_0)))) {
        vmStubsPH1Z2_r_V_we0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z2_r_V_we0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z2_z_V_address0() {
    vmStubsPH1Z2_z_V_address0 =  (sc_lv<1>) (ap_const_lv64_0);
}

void VMRouter::thread_vmStubsPH1Z2_z_V_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read())) {
        vmStubsPH1Z2_z_V_ce0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z2_z_V_ce0 = ap_const_logic_0;
    }
}

void VMRouter::thread_vmStubsPH1Z2_z_V_d0() {
    vmStubsPH1Z2_z_V_d0 = op2_V_read_assign_s_reg_406.read();
}

void VMRouter::thread_vmStubsPH1Z2_z_V_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_sig_cseq_ST_st3_fsm_2.read()) && 
          esl_seteq<1,1,1>(cond_fu_359_p2.read(), ap_const_lv1_0)))) {
        vmStubsPH1Z2_z_V_we0 = ap_const_logic_1;
    } else {
        vmStubsPH1Z2_z_V_we0 = ap_const_logic_0;
    }
}

void VMRouter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

void VMRouter::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stubsInLayer_z_V_address0\" :  \"" << stubsInLayer_z_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stubsInLayer_z_V_ce0\" :  \"" << stubsInLayer_z_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stubsInLayer_z_V_q0\" :  \"" << stubsInLayer_z_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stubsInLayer_phi_V_address0\" :  \"" << stubsInLayer_phi_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stubsInLayer_phi_V_ce0\" :  \"" << stubsInLayer_phi_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stubsInLayer_phi_V_q0\" :  \"" << stubsInLayer_phi_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stubsInLayer_r_V_address0\" :  \"" << stubsInLayer_r_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stubsInLayer_r_V_ce0\" :  \"" << stubsInLayer_r_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stubsInLayer_r_V_q0\" :  \"" << stubsInLayer_r_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stubsInLayer_pt_V_address0\" :  \"" << stubsInLayer_pt_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stubsInLayer_pt_V_ce0\" :  \"" << stubsInLayer_pt_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stubsInLayer_pt_V_q0\" :  \"" << stubsInLayer_pt_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_z_V_address0\" :  \"" << allStubs_z_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_z_V_ce0\" :  \"" << allStubs_z_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_z_V_we0\" :  \"" << allStubs_z_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_z_V_d0\" :  \"" << allStubs_z_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_phi_V_address0\" :  \"" << allStubs_phi_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_phi_V_ce0\" :  \"" << allStubs_phi_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_phi_V_we0\" :  \"" << allStubs_phi_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_phi_V_d0\" :  \"" << allStubs_phi_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_r_V_address0\" :  \"" << allStubs_r_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_r_V_ce0\" :  \"" << allStubs_r_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_r_V_we0\" :  \"" << allStubs_r_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_r_V_d0\" :  \"" << allStubs_r_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_pt_V_address0\" :  \"" << allStubs_pt_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_pt_V_ce0\" :  \"" << allStubs_pt_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_pt_V_we0\" :  \"" << allStubs_pt_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"allStubs_pt_V_d0\" :  \"" << allStubs_pt_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_z_V_address0\" :  \"" << vmStubsPH1Z1_z_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_z_V_ce0\" :  \"" << vmStubsPH1Z1_z_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_z_V_we0\" :  \"" << vmStubsPH1Z1_z_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_z_V_d0\" :  \"" << vmStubsPH1Z1_z_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_phi_V_address0\" :  \"" << vmStubsPH1Z1_phi_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_phi_V_ce0\" :  \"" << vmStubsPH1Z1_phi_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_phi_V_we0\" :  \"" << vmStubsPH1Z1_phi_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_phi_V_d0\" :  \"" << vmStubsPH1Z1_phi_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_r_V_address0\" :  \"" << vmStubsPH1Z1_r_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_r_V_ce0\" :  \"" << vmStubsPH1Z1_r_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_r_V_we0\" :  \"" << vmStubsPH1Z1_r_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_r_V_d0\" :  \"" << vmStubsPH1Z1_r_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_pt_V_address0\" :  \"" << vmStubsPH1Z1_pt_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_pt_V_ce0\" :  \"" << vmStubsPH1Z1_pt_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_pt_V_we0\" :  \"" << vmStubsPH1Z1_pt_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_pt_V_d0\" :  \"" << vmStubsPH1Z1_pt_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_index_V_address0\" :  \"" << vmStubsPH1Z1_index_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_index_V_ce0\" :  \"" << vmStubsPH1Z1_index_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_index_V_we0\" :  \"" << vmStubsPH1Z1_index_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z1_index_V_d0\" :  \"" << vmStubsPH1Z1_index_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_z_V_address0\" :  \"" << vmStubsPH1Z2_z_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_z_V_ce0\" :  \"" << vmStubsPH1Z2_z_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_z_V_we0\" :  \"" << vmStubsPH1Z2_z_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_z_V_d0\" :  \"" << vmStubsPH1Z2_z_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_phi_V_address0\" :  \"" << vmStubsPH1Z2_phi_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_phi_V_ce0\" :  \"" << vmStubsPH1Z2_phi_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_phi_V_we0\" :  \"" << vmStubsPH1Z2_phi_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_phi_V_d0\" :  \"" << vmStubsPH1Z2_phi_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_r_V_address0\" :  \"" << vmStubsPH1Z2_r_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_r_V_ce0\" :  \"" << vmStubsPH1Z2_r_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_r_V_we0\" :  \"" << vmStubsPH1Z2_r_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_r_V_d0\" :  \"" << vmStubsPH1Z2_r_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_pt_V_address0\" :  \"" << vmStubsPH1Z2_pt_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_pt_V_ce0\" :  \"" << vmStubsPH1Z2_pt_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_pt_V_we0\" :  \"" << vmStubsPH1Z2_pt_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_pt_V_d0\" :  \"" << vmStubsPH1Z2_pt_V_d0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_index_V_address0\" :  \"" << vmStubsPH1Z2_index_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_index_V_ce0\" :  \"" << vmStubsPH1Z2_index_V_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_index_V_we0\" :  \"" << vmStubsPH1Z2_index_V_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"vmStubsPH1Z2_index_V_d0\" :  \"" << vmStubsPH1Z2_index_V_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

