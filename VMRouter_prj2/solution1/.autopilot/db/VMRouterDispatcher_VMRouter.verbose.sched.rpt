

================================================================
== Vivado HLS Report for 'VMRouterDispatcher_VMRouter'
================================================================
* Date:           Mon Jul 24 09:32:27 2017

* Version:        2016.1 (Build 1538259 on Fri Apr 08 16:12:49 MDT 2016)
* Project:        VMRouter_prj2
* Solution:       solution1
* Product family: virtex7
* Target device:  xc7vx690tffg1927-2


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   4.16|      3.50|        0.52|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    4|   53|    4|   53|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+--------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  |  Trip  |          |
        | Loop Name| min | max |  Latency |  achieved |   target  |  Count | Pipelined|
        +----------+-----+-----+----------+-----------+-----------+--------+----------+
        |- Loop 1  |    2|   51|         3|          1|          1| 1 ~ 50 |    yes   |
        +----------+-----+-----+----------+-----------+-----------+--------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 5
* Pipeline: 1
  Pipeline-0: II = 1, D = 3, States = { 2 3 4 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	5  / (!tmp) | (tmp & !tmp_1)
	3  / (tmp & tmp_1)
3 --> 
	4  / true
4 --> 
	2  / true
5 --> 
* FSM state operations: 

 <State 1>: 0.89ns
ST_1: nPH4Z2_V [1/1] 0.00ns
:0  %nPH4Z2_V = alloca i6

ST_1: nPH3Z2_V [1/1] 0.00ns
:1  %nPH3Z2_V = alloca i6

ST_1: nPH2Z2_V [1/1] 0.00ns
:2  %nPH2Z2_V = alloca i6

ST_1: nPH1Z2_V [1/1] 0.00ns
:3  %nPH1Z2_V = alloca i6

ST_1: nPH4Z1_V [1/1] 0.00ns
:4  %nPH4Z1_V = alloca i6

ST_1: nPH3Z1_V [1/1] 0.00ns
:5  %nPH3Z1_V = alloca i6

ST_1: nPH2Z1_V [1/1] 0.00ns
:6  %nPH2Z1_V = alloca i6

ST_1: nPH1Z1_V [1/1] 0.00ns
:7  %nPH1Z1_V = alloca i6

ST_1: nPH4Z2_V_read_1 [1/1] 0.00ns
:8  %nPH4Z2_V_read_1 = call i6 @_ssdm_op_Read.ap_auto.i6(i6 %nPH4Z2_V_read)

ST_1: nPH3Z2_V_read_1 [1/1] 0.00ns
:9  %nPH3Z2_V_read_1 = call i6 @_ssdm_op_Read.ap_auto.i6(i6 %nPH3Z2_V_read)

ST_1: nPH2Z2_V_read_1 [1/1] 0.00ns
:10  %nPH2Z2_V_read_1 = call i6 @_ssdm_op_Read.ap_auto.i6(i6 %nPH2Z2_V_read)

ST_1: nPH1Z2_V_read_1 [1/1] 0.00ns
:11  %nPH1Z2_V_read_1 = call i6 @_ssdm_op_Read.ap_auto.i6(i6 %nPH1Z2_V_read)

ST_1: nPH4Z1_V_read_1 [1/1] 0.00ns
:12  %nPH4Z1_V_read_1 = call i6 @_ssdm_op_Read.ap_auto.i6(i6 %nPH4Z1_V_read)

ST_1: nPH3Z1_V_read_1 [1/1] 0.00ns
:13  %nPH3Z1_V_read_1 = call i6 @_ssdm_op_Read.ap_auto.i6(i6 %nPH3Z1_V_read)

ST_1: nPH2Z1_V_read_1 [1/1] 0.00ns
:14  %nPH2Z1_V_read_1 = call i6 @_ssdm_op_Read.ap_auto.i6(i6 %nPH2Z1_V_read)

ST_1: nPH1Z1_V_read_1 [1/1] 0.00ns
:15  %nPH1Z1_V_read_1 = call i6 @_ssdm_op_Read.ap_auto.i6(i6 %nPH1Z1_V_read)

ST_1: nStubs_read [1/1] 0.00ns
:16  %nStubs_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %nStubs)

ST_1: stg_23 [1/1] 0.89ns
:17  store i6 %nPH1Z1_V_read_1, i6* %nPH1Z1_V

ST_1: stg_24 [1/1] 0.89ns
:18  store i6 %nPH2Z1_V_read_1, i6* %nPH2Z1_V

ST_1: stg_25 [1/1] 0.89ns
:19  store i6 %nPH3Z1_V_read_1, i6* %nPH3Z1_V

ST_1: stg_26 [1/1] 0.89ns
:20  store i6 %nPH4Z1_V_read_1, i6* %nPH4Z1_V

ST_1: stg_27 [1/1] 0.89ns
:21  store i6 %nPH1Z2_V_read_1, i6* %nPH1Z2_V

ST_1: stg_28 [1/1] 0.89ns
:22  store i6 %nPH2Z2_V_read_1, i6* %nPH2Z2_V

ST_1: stg_29 [1/1] 0.89ns
:23  store i6 %nPH3Z2_V_read_1, i6* %nPH3Z2_V

ST_1: stg_30 [1/1] 0.89ns
:24  store i6 %nPH4Z2_V_read_1, i6* %nPH4Z2_V

ST_1: stg_31 [1/1] 0.89ns
:25  br label %1


 <State 2>: 2.39ns
ST_2: op2_V_read_assign [1/1] 0.00ns
:0  %op2_V_read_assign = phi i6 [ 0, %0 ], [ %index_V, %._crit_edge ]

ST_2: tmp [1/1] 1.16ns
:1  %tmp = icmp ult i6 %op2_V_read_assign, -14

ST_2: index_V [1/1] 1.27ns
:2  %index_V = add i6 %op2_V_read_assign, 1

ST_2: stg_35 [1/1] 0.00ns
:3  br i1 %tmp, label %2, label %.loopexit

ST_2: i_cast1 [1/1] 0.00ns
:0  %i_cast1 = zext i6 %op2_V_read_assign to i32

ST_2: empty [1/1] 0.00ns
:1  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 1, i64 50, i64 25)

ST_2: tmp_3 [1/1] 0.00ns
:2  %tmp_3 = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str)

ST_2: stg_39 [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind

ST_2: tmp_1 [1/1] 1.41ns
:4  %tmp_1 = icmp slt i32 %i_cast1, %nStubs_read

ST_2: stg_41 [1/1] 0.00ns
:5  br i1 %tmp_1, label %3, label %.loopexit

ST_2: tmp_2 [1/1] 0.00ns
:0  %tmp_2 = zext i6 %op2_V_read_assign to i64

ST_2: stubsInLayer_z_V_addr [1/1] 0.00ns
:1  %stubsInLayer_z_V_addr = getelementptr [50 x i12]* %stubsInLayer_z_V, i64 0, i64 %tmp_2

ST_2: stubsInLayer_phi_V_addr [1/1] 0.00ns
:2  %stubsInLayer_phi_V_addr = getelementptr [50 x i14]* %stubsInLayer_phi_V, i64 0, i64 %tmp_2

ST_2: stubsInLayer_r_V_addr [1/1] 0.00ns
:3  %stubsInLayer_r_V_addr = getelementptr [50 x i7]* %stubsInLayer_r_V, i64 0, i64 %tmp_2

ST_2: stubsInLayer_pt_V_addr [1/1] 0.00ns
:4  %stubsInLayer_pt_V_addr = getelementptr [50 x i3]* %stubsInLayer_pt_V, i64 0, i64 %tmp_2

ST_2: p_Val2_s [2/2] 2.39ns
:5  %p_Val2_s = load i12* %stubsInLayer_z_V_addr, align 2

ST_2: p_Val2_1 [2/2] 2.39ns
:6  %p_Val2_1 = load i14* %stubsInLayer_phi_V_addr, align 2

ST_2: p_Val2_2 [2/2] 2.39ns
:7  %p_Val2_2 = load i7* %stubsInLayer_r_V_addr, align 1

ST_2: redPt_V [2/2] 2.39ns
:8  %redPt_V = load i3* %stubsInLayer_pt_V_addr, align 1


 <State 3>: 3.50ns
ST_3: p_Val2_s [1/2] 2.39ns
:5  %p_Val2_s = load i12* %stubsInLayer_z_V_addr, align 2

ST_3: p_Val2_1 [1/2] 2.39ns
:6  %p_Val2_1 = load i14* %stubsInLayer_phi_V_addr, align 2

ST_3: p_Val2_2 [1/2] 2.39ns
:7  %p_Val2_2 = load i7* %stubsInLayer_r_V_addr, align 1

ST_3: redPt_V [1/2] 2.39ns
:8  %redPt_V = load i3* %stubsInLayer_pt_V_addr, align 1

ST_3: p_Result_s [1/1] 0.00ns
:17  %p_Result_s = call i4 @_ssdm_op_PartSelect.i4.i12.i32.i32(i12 %p_Val2_s, i32 5, i32 8)

ST_3: p_Result_1 [1/1] 0.00ns
:18  %p_Result_1 = call i3 @_ssdm_op_PartSelect.i3.i14.i32.i32(i14 %p_Val2_1, i32 9, i32 11)

ST_3: p_Result_2 [1/1] 0.00ns
:19  %p_Result_2 = call i2 @_ssdm_op_PartSelect.i2.i7.i32.i32(i7 %p_Val2_2, i32 5, i32 6)

ST_3: p_Result_3 [1/1] 0.00ns
:20  %p_Result_3 = call i2 @_ssdm_op_PartSelect.i2.i14.i32.i32(i14 %p_Val2_1, i32 12, i32 13)

ST_3: routeZ_V [1/1] 0.00ns
:21  %routeZ_V = call i1 @_ssdm_op_BitSelect.i1.i12.i32(i12 %p_Val2_s, i32 9)

ST_3: stg_60 [1/1] 0.00ns
:22  br i1 %routeZ_V, label %9, label %4

ST_3: stg_61 [1/1] 1.11ns
:0  switch i2 %p_Result_3, label %._crit_edge [
    i2 0, label %5
    i2 1, label %6
    i2 -2, label %7
    i2 -1, label %8
  ]

ST_3: stg_62 [1/1] 0.00ns
:14  br label %._crit_edge

ST_3: stg_63 [1/1] 0.00ns
:14  br label %._crit_edge

ST_3: stg_64 [1/1] 0.00ns
:14  br label %._crit_edge

ST_3: stg_65 [1/1] 0.00ns
:14  br label %._crit_edge

ST_3: stg_66 [1/1] 1.11ns
:0  switch i2 %p_Result_3, label %._crit_edge [
    i2 0, label %10
    i2 1, label %11
    i2 -2, label %12
    i2 -1, label %13
  ]

ST_3: stg_67 [1/1] 0.00ns
:14  br label %._crit_edge

ST_3: stg_68 [1/1] 0.00ns
:14  br label %._crit_edge

ST_3: stg_69 [1/1] 0.00ns
:14  br label %._crit_edge

ST_3: stg_70 [1/1] 0.00ns
:14  br label %._crit_edge


 <State 4>: 2.39ns
ST_4: allStubs_z_V_addr [1/1] 0.00ns
:9  %allStubs_z_V_addr = getelementptr [50 x i12]* %allStubs_z_V, i64 0, i64 %tmp_2

ST_4: allStubs_phi_V_addr [1/1] 0.00ns
:10  %allStubs_phi_V_addr = getelementptr [50 x i14]* %allStubs_phi_V, i64 0, i64 %tmp_2

ST_4: allStubs_r_V_addr [1/1] 0.00ns
:11  %allStubs_r_V_addr = getelementptr [50 x i7]* %allStubs_r_V, i64 0, i64 %tmp_2

ST_4: allStubs_pt_V_addr [1/1] 0.00ns
:12  %allStubs_pt_V_addr = getelementptr [50 x i3]* %allStubs_pt_V, i64 0, i64 %tmp_2

ST_4: stg_75 [1/1] 2.39ns
:13  store i12 %p_Val2_s, i12* %allStubs_z_V_addr, align 2

ST_4: stg_76 [1/1] 2.39ns
:14  store i14 %p_Val2_1, i14* %allStubs_phi_V_addr, align 2

ST_4: stg_77 [1/1] 2.39ns
:15  store i7 %p_Val2_2, i7* %allStubs_r_V_addr, align 1

ST_4: stg_78 [1/1] 2.39ns
:16  store i3 %redPt_V, i3* %allStubs_pt_V_addr, align 1

ST_4: nPH4Z1_V_load [1/1] 0.00ns
:0  %nPH4Z1_V_load = load i6* %nPH4Z1_V

ST_4: tmp_9 [1/1] 0.00ns
:1  %tmp_9 = zext i6 %nPH4Z1_V_load to i64

ST_4: vmStubsPH4Z1_z_V_addr [1/1] 0.00ns
:2  %vmStubsPH4Z1_z_V_addr = getelementptr [50 x i4]* %vmStubsPH4Z1_z_V, i64 0, i64 %tmp_9

ST_4: vmStubsPH4Z1_phi_V_addr [1/1] 0.00ns
:3  %vmStubsPH4Z1_phi_V_addr = getelementptr [50 x i3]* %vmStubsPH4Z1_phi_V, i64 0, i64 %tmp_9

ST_4: vmStubsPH4Z1_r_V_addr [1/1] 0.00ns
:4  %vmStubsPH4Z1_r_V_addr = getelementptr [50 x i2]* %vmStubsPH4Z1_r_V, i64 0, i64 %tmp_9

ST_4: vmStubsPH4Z1_pt_V_addr [1/1] 0.00ns
:5  %vmStubsPH4Z1_pt_V_addr = getelementptr [50 x i3]* %vmStubsPH4Z1_pt_V, i64 0, i64 %tmp_9

ST_4: vmStubsPH4Z1_index_V_addr [1/1] 0.00ns
:6  %vmStubsPH4Z1_index_V_addr = getelementptr [50 x i6]* %vmStubsPH4Z1_index_V, i64 0, i64 %tmp_9

ST_4: stg_86 [1/1] 2.39ns
:7  store i4 %p_Result_s, i4* %vmStubsPH4Z1_z_V_addr, align 1

ST_4: stg_87 [1/1] 2.39ns
:8  store i3 %p_Result_1, i3* %vmStubsPH4Z1_phi_V_addr, align 1

ST_4: stg_88 [1/1] 2.39ns
:9  store i2 %p_Result_2, i2* %vmStubsPH4Z1_r_V_addr, align 1

ST_4: stg_89 [1/1] 2.39ns
:10  store i3 %redPt_V, i3* %vmStubsPH4Z1_pt_V_addr, align 1

ST_4: stg_90 [1/1] 2.39ns
:11  store i6 %op2_V_read_assign, i6* %vmStubsPH4Z1_index_V_addr, align 1

ST_4: tmp_10 [1/1] 1.27ns
:12  %tmp_10 = add i6 %nPH4Z1_V_load, 1

ST_4: stg_92 [1/1] 0.89ns
:13  store i6 %tmp_10, i6* %nPH4Z1_V

ST_4: nPH3Z1_V_load [1/1] 0.00ns
:0  %nPH3Z1_V_load = load i6* %nPH3Z1_V

ST_4: tmp_7 [1/1] 0.00ns
:1  %tmp_7 = zext i6 %nPH3Z1_V_load to i64

ST_4: vmStubsPH3Z1_z_V_addr [1/1] 0.00ns
:2  %vmStubsPH3Z1_z_V_addr = getelementptr [50 x i4]* %vmStubsPH3Z1_z_V, i64 0, i64 %tmp_7

ST_4: vmStubsPH3Z1_phi_V_addr [1/1] 0.00ns
:3  %vmStubsPH3Z1_phi_V_addr = getelementptr [50 x i3]* %vmStubsPH3Z1_phi_V, i64 0, i64 %tmp_7

ST_4: vmStubsPH3Z1_r_V_addr [1/1] 0.00ns
:4  %vmStubsPH3Z1_r_V_addr = getelementptr [50 x i2]* %vmStubsPH3Z1_r_V, i64 0, i64 %tmp_7

ST_4: vmStubsPH3Z1_pt_V_addr [1/1] 0.00ns
:5  %vmStubsPH3Z1_pt_V_addr = getelementptr [50 x i3]* %vmStubsPH3Z1_pt_V, i64 0, i64 %tmp_7

ST_4: vmStubsPH3Z1_index_V_addr [1/1] 0.00ns
:6  %vmStubsPH3Z1_index_V_addr = getelementptr [50 x i6]* %vmStubsPH3Z1_index_V, i64 0, i64 %tmp_7

ST_4: stg_100 [1/1] 2.39ns
:7  store i4 %p_Result_s, i4* %vmStubsPH3Z1_z_V_addr, align 1

ST_4: stg_101 [1/1] 2.39ns
:8  store i3 %p_Result_1, i3* %vmStubsPH3Z1_phi_V_addr, align 1

ST_4: stg_102 [1/1] 2.39ns
:9  store i2 %p_Result_2, i2* %vmStubsPH3Z1_r_V_addr, align 1

ST_4: stg_103 [1/1] 2.39ns
:10  store i3 %redPt_V, i3* %vmStubsPH3Z1_pt_V_addr, align 1

ST_4: stg_104 [1/1] 2.39ns
:11  store i6 %op2_V_read_assign, i6* %vmStubsPH3Z1_index_V_addr, align 1

ST_4: tmp_8 [1/1] 1.27ns
:12  %tmp_8 = add i6 %nPH3Z1_V_load, 1

ST_4: stg_106 [1/1] 0.89ns
:13  store i6 %tmp_8, i6* %nPH3Z1_V

ST_4: nPH2Z1_V_load [1/1] 0.00ns
:0  %nPH2Z1_V_load = load i6* %nPH2Z1_V

ST_4: tmp_5 [1/1] 0.00ns
:1  %tmp_5 = zext i6 %nPH2Z1_V_load to i64

ST_4: vmStubsPH2Z1_z_V_addr [1/1] 0.00ns
:2  %vmStubsPH2Z1_z_V_addr = getelementptr [50 x i4]* %vmStubsPH2Z1_z_V, i64 0, i64 %tmp_5

ST_4: vmStubsPH2Z1_phi_V_addr [1/1] 0.00ns
:3  %vmStubsPH2Z1_phi_V_addr = getelementptr [50 x i3]* %vmStubsPH2Z1_phi_V, i64 0, i64 %tmp_5

ST_4: vmStubsPH2Z1_r_V_addr [1/1] 0.00ns
:4  %vmStubsPH2Z1_r_V_addr = getelementptr [50 x i2]* %vmStubsPH2Z1_r_V, i64 0, i64 %tmp_5

ST_4: vmStubsPH2Z1_pt_V_addr [1/1] 0.00ns
:5  %vmStubsPH2Z1_pt_V_addr = getelementptr [50 x i3]* %vmStubsPH2Z1_pt_V, i64 0, i64 %tmp_5

ST_4: vmStubsPH2Z1_index_V_addr [1/1] 0.00ns
:6  %vmStubsPH2Z1_index_V_addr = getelementptr [50 x i6]* %vmStubsPH2Z1_index_V, i64 0, i64 %tmp_5

ST_4: stg_114 [1/1] 2.39ns
:7  store i4 %p_Result_s, i4* %vmStubsPH2Z1_z_V_addr, align 1

ST_4: stg_115 [1/1] 2.39ns
:8  store i3 %p_Result_1, i3* %vmStubsPH2Z1_phi_V_addr, align 1

ST_4: stg_116 [1/1] 2.39ns
:9  store i2 %p_Result_2, i2* %vmStubsPH2Z1_r_V_addr, align 1

ST_4: stg_117 [1/1] 2.39ns
:10  store i3 %redPt_V, i3* %vmStubsPH2Z1_pt_V_addr, align 1

ST_4: stg_118 [1/1] 2.39ns
:11  store i6 %op2_V_read_assign, i6* %vmStubsPH2Z1_index_V_addr, align 1

ST_4: tmp_6 [1/1] 1.27ns
:12  %tmp_6 = add i6 %nPH2Z1_V_load, 1

ST_4: stg_120 [1/1] 0.89ns
:13  store i6 %tmp_6, i6* %nPH2Z1_V

ST_4: nPH1Z1_V_load [1/1] 0.00ns
:0  %nPH1Z1_V_load = load i6* %nPH1Z1_V

ST_4: tmp_s [1/1] 0.00ns
:1  %tmp_s = zext i6 %nPH1Z1_V_load to i64

ST_4: vmStubsPH1Z1_z_V_addr [1/1] 0.00ns
:2  %vmStubsPH1Z1_z_V_addr = getelementptr [50 x i4]* %vmStubsPH1Z1_z_V, i64 0, i64 %tmp_s

ST_4: vmStubsPH1Z1_phi_V_addr [1/1] 0.00ns
:3  %vmStubsPH1Z1_phi_V_addr = getelementptr [50 x i3]* %vmStubsPH1Z1_phi_V, i64 0, i64 %tmp_s

ST_4: vmStubsPH1Z1_r_V_addr [1/1] 0.00ns
:4  %vmStubsPH1Z1_r_V_addr = getelementptr [50 x i2]* %vmStubsPH1Z1_r_V, i64 0, i64 %tmp_s

ST_4: vmStubsPH1Z1_pt_V_addr [1/1] 0.00ns
:5  %vmStubsPH1Z1_pt_V_addr = getelementptr [50 x i3]* %vmStubsPH1Z1_pt_V, i64 0, i64 %tmp_s

ST_4: vmStubsPH1Z1_index_V_addr [1/1] 0.00ns
:6  %vmStubsPH1Z1_index_V_addr = getelementptr [50 x i6]* %vmStubsPH1Z1_index_V, i64 0, i64 %tmp_s

ST_4: stg_128 [1/1] 2.39ns
:7  store i4 %p_Result_s, i4* %vmStubsPH1Z1_z_V_addr, align 1

ST_4: stg_129 [1/1] 2.39ns
:8  store i3 %p_Result_1, i3* %vmStubsPH1Z1_phi_V_addr, align 1

ST_4: stg_130 [1/1] 2.39ns
:9  store i2 %p_Result_2, i2* %vmStubsPH1Z1_r_V_addr, align 1

ST_4: stg_131 [1/1] 2.39ns
:10  store i3 %redPt_V, i3* %vmStubsPH1Z1_pt_V_addr, align 1

ST_4: stg_132 [1/1] 2.39ns
:11  store i6 %op2_V_read_assign, i6* %vmStubsPH1Z1_index_V_addr, align 1

ST_4: tmp_4 [1/1] 1.27ns
:12  %tmp_4 = add i6 %nPH1Z1_V_load, 1

ST_4: stg_134 [1/1] 0.89ns
:13  store i6 %tmp_4, i6* %nPH1Z1_V

ST_4: nPH4Z2_V_load [1/1] 0.00ns
:0  %nPH4Z2_V_load = load i6* %nPH4Z2_V

ST_4: tmp_17 [1/1] 0.00ns
:1  %tmp_17 = zext i6 %nPH4Z2_V_load to i64

ST_4: vmStubsPH4Z2_z_V_addr [1/1] 0.00ns
:2  %vmStubsPH4Z2_z_V_addr = getelementptr [50 x i4]* %vmStubsPH4Z2_z_V, i64 0, i64 %tmp_17

ST_4: vmStubsPH4Z2_phi_V_addr [1/1] 0.00ns
:3  %vmStubsPH4Z2_phi_V_addr = getelementptr [50 x i3]* %vmStubsPH4Z2_phi_V, i64 0, i64 %tmp_17

ST_4: vmStubsPH4Z2_r_V_addr [1/1] 0.00ns
:4  %vmStubsPH4Z2_r_V_addr = getelementptr [50 x i2]* %vmStubsPH4Z2_r_V, i64 0, i64 %tmp_17

ST_4: vmStubsPH4Z2_pt_V_addr [1/1] 0.00ns
:5  %vmStubsPH4Z2_pt_V_addr = getelementptr [50 x i3]* %vmStubsPH4Z2_pt_V, i64 0, i64 %tmp_17

ST_4: vmStubsPH4Z2_index_V_addr [1/1] 0.00ns
:6  %vmStubsPH4Z2_index_V_addr = getelementptr [50 x i6]* %vmStubsPH4Z2_index_V, i64 0, i64 %tmp_17

ST_4: stg_142 [1/1] 2.39ns
:7  store i4 %p_Result_s, i4* %vmStubsPH4Z2_z_V_addr, align 1

ST_4: stg_143 [1/1] 2.39ns
:8  store i3 %p_Result_1, i3* %vmStubsPH4Z2_phi_V_addr, align 1

ST_4: stg_144 [1/1] 2.39ns
:9  store i2 %p_Result_2, i2* %vmStubsPH4Z2_r_V_addr, align 1

ST_4: stg_145 [1/1] 2.39ns
:10  store i3 %redPt_V, i3* %vmStubsPH4Z2_pt_V_addr, align 1

ST_4: stg_146 [1/1] 2.39ns
:11  store i6 %op2_V_read_assign, i6* %vmStubsPH4Z2_index_V_addr, align 1

ST_4: tmp_18 [1/1] 1.27ns
:12  %tmp_18 = add i6 %nPH4Z2_V_load, 1

ST_4: stg_148 [1/1] 0.89ns
:13  store i6 %tmp_18, i6* %nPH4Z2_V

ST_4: nPH3Z2_V_load [1/1] 0.00ns
:0  %nPH3Z2_V_load = load i6* %nPH3Z2_V

ST_4: tmp_15 [1/1] 0.00ns
:1  %tmp_15 = zext i6 %nPH3Z2_V_load to i64

ST_4: vmStubsPH3Z2_z_V_addr [1/1] 0.00ns
:2  %vmStubsPH3Z2_z_V_addr = getelementptr [50 x i4]* %vmStubsPH3Z2_z_V, i64 0, i64 %tmp_15

ST_4: vmStubsPH3Z2_phi_V_addr [1/1] 0.00ns
:3  %vmStubsPH3Z2_phi_V_addr = getelementptr [50 x i3]* %vmStubsPH3Z2_phi_V, i64 0, i64 %tmp_15

ST_4: vmStubsPH3Z2_r_V_addr [1/1] 0.00ns
:4  %vmStubsPH3Z2_r_V_addr = getelementptr [50 x i2]* %vmStubsPH3Z2_r_V, i64 0, i64 %tmp_15

ST_4: vmStubsPH3Z2_pt_V_addr [1/1] 0.00ns
:5  %vmStubsPH3Z2_pt_V_addr = getelementptr [50 x i3]* %vmStubsPH3Z2_pt_V, i64 0, i64 %tmp_15

ST_4: vmStubsPH3Z2_index_V_addr [1/1] 0.00ns
:6  %vmStubsPH3Z2_index_V_addr = getelementptr [50 x i6]* %vmStubsPH3Z2_index_V, i64 0, i64 %tmp_15

ST_4: stg_156 [1/1] 2.39ns
:7  store i4 %p_Result_s, i4* %vmStubsPH3Z2_z_V_addr, align 1

ST_4: stg_157 [1/1] 2.39ns
:8  store i3 %p_Result_1, i3* %vmStubsPH3Z2_phi_V_addr, align 1

ST_4: stg_158 [1/1] 2.39ns
:9  store i2 %p_Result_2, i2* %vmStubsPH3Z2_r_V_addr, align 1

ST_4: stg_159 [1/1] 2.39ns
:10  store i3 %redPt_V, i3* %vmStubsPH3Z2_pt_V_addr, align 1

ST_4: stg_160 [1/1] 2.39ns
:11  store i6 %op2_V_read_assign, i6* %vmStubsPH3Z2_index_V_addr, align 1

ST_4: tmp_16 [1/1] 1.27ns
:12  %tmp_16 = add i6 %nPH3Z2_V_load, 1

ST_4: stg_162 [1/1] 0.89ns
:13  store i6 %tmp_16, i6* %nPH3Z2_V

ST_4: nPH2Z2_V_load [1/1] 0.00ns
:0  %nPH2Z2_V_load = load i6* %nPH2Z2_V

ST_4: tmp_13 [1/1] 0.00ns
:1  %tmp_13 = zext i6 %nPH2Z2_V_load to i64

ST_4: vmStubsPH2Z2_z_V_addr [1/1] 0.00ns
:2  %vmStubsPH2Z2_z_V_addr = getelementptr [50 x i4]* %vmStubsPH2Z2_z_V, i64 0, i64 %tmp_13

ST_4: vmStubsPH2Z2_phi_V_addr [1/1] 0.00ns
:3  %vmStubsPH2Z2_phi_V_addr = getelementptr [50 x i3]* %vmStubsPH2Z2_phi_V, i64 0, i64 %tmp_13

ST_4: vmStubsPH2Z2_r_V_addr [1/1] 0.00ns
:4  %vmStubsPH2Z2_r_V_addr = getelementptr [50 x i2]* %vmStubsPH2Z2_r_V, i64 0, i64 %tmp_13

ST_4: vmStubsPH2Z2_pt_V_addr [1/1] 0.00ns
:5  %vmStubsPH2Z2_pt_V_addr = getelementptr [50 x i3]* %vmStubsPH2Z2_pt_V, i64 0, i64 %tmp_13

ST_4: vmStubsPH2Z2_index_V_addr [1/1] 0.00ns
:6  %vmStubsPH2Z2_index_V_addr = getelementptr [50 x i6]* %vmStubsPH2Z2_index_V, i64 0, i64 %tmp_13

ST_4: stg_170 [1/1] 2.39ns
:7  store i4 %p_Result_s, i4* %vmStubsPH2Z2_z_V_addr, align 1

ST_4: stg_171 [1/1] 2.39ns
:8  store i3 %p_Result_1, i3* %vmStubsPH2Z2_phi_V_addr, align 1

ST_4: stg_172 [1/1] 2.39ns
:9  store i2 %p_Result_2, i2* %vmStubsPH2Z2_r_V_addr, align 1

ST_4: stg_173 [1/1] 2.39ns
:10  store i3 %redPt_V, i3* %vmStubsPH2Z2_pt_V_addr, align 1

ST_4: stg_174 [1/1] 2.39ns
:11  store i6 %op2_V_read_assign, i6* %vmStubsPH2Z2_index_V_addr, align 1

ST_4: tmp_14 [1/1] 1.27ns
:12  %tmp_14 = add i6 %nPH2Z2_V_load, 1

ST_4: stg_176 [1/1] 0.89ns
:13  store i6 %tmp_14, i6* %nPH2Z2_V

ST_4: nPH1Z2_V_load [1/1] 0.00ns
:0  %nPH1Z2_V_load = load i6* %nPH1Z2_V

ST_4: tmp_11 [1/1] 0.00ns
:1  %tmp_11 = zext i6 %nPH1Z2_V_load to i64

ST_4: vmStubsPH1Z2_z_V_addr [1/1] 0.00ns
:2  %vmStubsPH1Z2_z_V_addr = getelementptr [50 x i4]* %vmStubsPH1Z2_z_V, i64 0, i64 %tmp_11

ST_4: vmStubsPH1Z2_phi_V_addr [1/1] 0.00ns
:3  %vmStubsPH1Z2_phi_V_addr = getelementptr [50 x i3]* %vmStubsPH1Z2_phi_V, i64 0, i64 %tmp_11

ST_4: vmStubsPH1Z2_r_V_addr [1/1] 0.00ns
:4  %vmStubsPH1Z2_r_V_addr = getelementptr [50 x i2]* %vmStubsPH1Z2_r_V, i64 0, i64 %tmp_11

ST_4: vmStubsPH1Z2_pt_V_addr [1/1] 0.00ns
:5  %vmStubsPH1Z2_pt_V_addr = getelementptr [50 x i3]* %vmStubsPH1Z2_pt_V, i64 0, i64 %tmp_11

ST_4: vmStubsPH1Z2_index_V_addr [1/1] 0.00ns
:6  %vmStubsPH1Z2_index_V_addr = getelementptr [50 x i6]* %vmStubsPH1Z2_index_V, i64 0, i64 %tmp_11

ST_4: stg_184 [1/1] 2.39ns
:7  store i4 %p_Result_s, i4* %vmStubsPH1Z2_z_V_addr, align 1

ST_4: stg_185 [1/1] 2.39ns
:8  store i3 %p_Result_1, i3* %vmStubsPH1Z2_phi_V_addr, align 1

ST_4: stg_186 [1/1] 2.39ns
:9  store i2 %p_Result_2, i2* %vmStubsPH1Z2_r_V_addr, align 1

ST_4: stg_187 [1/1] 2.39ns
:10  store i3 %redPt_V, i3* %vmStubsPH1Z2_pt_V_addr, align 1

ST_4: stg_188 [1/1] 2.39ns
:11  store i6 %op2_V_read_assign, i6* %vmStubsPH1Z2_index_V_addr, align 1

ST_4: tmp_12 [1/1] 1.27ns
:12  %tmp_12 = add i6 %nPH1Z2_V_load, 1

ST_4: stg_190 [1/1] 0.89ns
:13  store i6 %tmp_12, i6* %nPH1Z2_V

ST_4: empty_16 [1/1] 0.00ns
._crit_edge:0  %empty_16 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str, i32 %tmp_3)

ST_4: stg_192 [1/1] 0.00ns
._crit_edge:1  br label %1


 <State 5>: 0.00ns
ST_5: nPH4Z2_V_load_1 [1/1] 0.00ns
.loopexit:0  %nPH4Z2_V_load_1 = load i6* %nPH4Z2_V

ST_5: nPH3Z2_V_load_1 [1/1] 0.00ns
.loopexit:1  %nPH3Z2_V_load_1 = load i6* %nPH3Z2_V

ST_5: nPH2Z2_V_load_1 [1/1] 0.00ns
.loopexit:2  %nPH2Z2_V_load_1 = load i6* %nPH2Z2_V

ST_5: nPH1Z2_V_load_1 [1/1] 0.00ns
.loopexit:3  %nPH1Z2_V_load_1 = load i6* %nPH1Z2_V

ST_5: nPH4Z1_V_load_1 [1/1] 0.00ns
.loopexit:4  %nPH4Z1_V_load_1 = load i6* %nPH4Z1_V

ST_5: nPH3Z1_V_load_1 [1/1] 0.00ns
.loopexit:5  %nPH3Z1_V_load_1 = load i6* %nPH3Z1_V

ST_5: nPH2Z1_V_load_1 [1/1] 0.00ns
.loopexit:6  %nPH2Z1_V_load_1 = load i6* %nPH2Z1_V

ST_5: nPH1Z1_V_load_1 [1/1] 0.00ns
.loopexit:7  %nPH1Z1_V_load_1 = load i6* %nPH1Z1_V

ST_5: mrv [1/1] 0.00ns
.loopexit:8  %mrv = insertvalue { i6, i6, i6, i6, i6, i6, i6, i6 } undef, i6 %nPH1Z1_V_load_1, 0

ST_5: mrv_1 [1/1] 0.00ns
.loopexit:9  %mrv_1 = insertvalue { i6, i6, i6, i6, i6, i6, i6, i6 } %mrv, i6 %nPH2Z1_V_load_1, 1

ST_5: mrv_2 [1/1] 0.00ns
.loopexit:10  %mrv_2 = insertvalue { i6, i6, i6, i6, i6, i6, i6, i6 } %mrv_1, i6 %nPH3Z1_V_load_1, 2

ST_5: mrv_3 [1/1] 0.00ns
.loopexit:11  %mrv_3 = insertvalue { i6, i6, i6, i6, i6, i6, i6, i6 } %mrv_2, i6 %nPH4Z1_V_load_1, 3

ST_5: mrv_4 [1/1] 0.00ns
.loopexit:12  %mrv_4 = insertvalue { i6, i6, i6, i6, i6, i6, i6, i6 } %mrv_3, i6 %nPH1Z2_V_load_1, 4

ST_5: mrv_5 [1/1] 0.00ns
.loopexit:13  %mrv_5 = insertvalue { i6, i6, i6, i6, i6, i6, i6, i6 } %mrv_4, i6 %nPH2Z2_V_load_1, 5

ST_5: mrv_6 [1/1] 0.00ns
.loopexit:14  %mrv_6 = insertvalue { i6, i6, i6, i6, i6, i6, i6, i6 } %mrv_5, i6 %nPH3Z2_V_load_1, 6

ST_5: mrv_7 [1/1] 0.00ns
.loopexit:15  %mrv_7 = insertvalue { i6, i6, i6, i6, i6, i6, i6, i6 } %mrv_6, i6 %nPH4Z2_V_load_1, 7

ST_5: stg_209 [1/1] 0.00ns
.loopexit:16  ret { i6, i6, i6, i6, i6, i6, i6, i6 } %mrv_7



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 4.16ns, clock uncertainty: 0.52ns.

 No timing violations. 


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
